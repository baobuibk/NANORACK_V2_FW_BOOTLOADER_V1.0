
NANORACK_V2_FW_BOOTLOADER_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003ad4  08003ad4  00004ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c5c  08003c5c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c60  08003c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003c64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005060  2**0
                  CONTENTS
 10 .bss          000002e8  20000060  20000060  00005060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000348  20000348  00005060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c11  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d9  00000000  00000000  0000dca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  00010480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000077e  00000000  00000000  00010ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d75  00000000  00000000  0001164e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c59c  00000000  00000000  000333c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc7a0  00000000  00000000  0003f95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c0ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002750  00000000  00000000  0010c144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0010e894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003abc 	.word	0x08003abc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08003abc 	.word	0x08003abc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004f8:	f3bf 8f4f 	dsb	sy
}
 80004fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <__NVIC_SystemReset+0x24>)
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000506:	4904      	ldr	r1, [pc, #16]	@ (8000518 <__NVIC_SystemReset+0x24>)
 8000508:	4b04      	ldr	r3, [pc, #16]	@ (800051c <__NVIC_SystemReset+0x28>)
 800050a:	4313      	orrs	r3, r2
 800050c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800050e:	f3bf 8f4f 	dsb	sy
}
 8000512:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <__NVIC_SystemReset+0x20>
 8000518:	e000ed00 	.word	0xe000ed00
 800051c:	05fa0004 	.word	0x05fa0004

08000520 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <LL_APB2_GRP1_ForceReset+0x20>)
 800052a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800052c:	4904      	ldr	r1, [pc, #16]	@ (8000540 <LL_APB2_GRP1_ForceReset+0x20>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800

08000544 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <LL_APB2_GRP1_ReleaseReset+0x24>)
 800054e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	43db      	mvns	r3, r3
 8000554:	4904      	ldr	r1, [pc, #16]	@ (8000568 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8000556:	4013      	ands	r3, r2
 8000558:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <BL_UART_Fetch_Host_Command>:
bool receiving_frame = false;

static uint8_t firmware_sel = 0xFF;

/************************************ Software Interfaces Implementations ************************************/
BL_Status BL_UART_Fetch_Host_Command(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t byte_timeout = 200; // Timeout cho từng byte
 8000572:	23c8      	movs	r3, #200	@ 0xc8
 8000574:	73fb      	strb	r3, [r7, #15]
	bool received_data = false;
 8000576:	2300      	movs	r3, #0
 8000578:	737b      	strb	r3, [r7, #13]
	BL_Status Status = BL_NACK;
 800057a:	2300      	movs	r3, #0
 800057c:	73bb      	strb	r3, [r7, #14]

	while (byte_timeout-- && !rbuffer_empty(&p_UART1_meta->rb_rx)) {
 800057e:	e099      	b.n	80006b4 <BL_UART_Fetch_Host_Command+0x148>
		data = rbuffer_remove(&p_UART1_meta->rb_rx);
 8000580:	4b57      	ldr	r3, [pc, #348]	@ (80006e0 <BL_UART_Fetch_Host_Command+0x174>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f85e 	bl	8003646 <rbuffer_remove>
 800058a:	4603      	mov	r3, r0
 800058c:	733b      	strb	r3, [r7, #12]
		received_data = true;
 800058e:	2301      	movs	r3, #1
 8000590:	737b      	strb	r3, [r7, #13]

		if (!receiving_frame) {
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <BL_UART_Fetch_Host_Command+0x178>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	f083 0301 	eor.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d01c      	beq.n	80005da <BL_UART_Fetch_Host_Command+0x6e>
			// Nhận byte đầu tiên (FRAME LENGTH)
			frame_length = data;
 80005a0:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <BL_UART_Fetch_Host_Command+0x17c>)
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	7013      	strb	r3, [r2, #0]
			if (frame_length > 0 && frame_length < 255) {
 80005a6:	4b50      	ldr	r3, [pc, #320]	@ (80006e8 <BL_UART_Fetch_Host_Command+0x17c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00e      	beq.n	80005cc <BL_UART_Fetch_Host_Command+0x60>
 80005ae:	4b4e      	ldr	r3, [pc, #312]	@ (80006e8 <BL_UART_Fetch_Host_Command+0x17c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2bff      	cmp	r3, #255	@ 0xff
 80005b4:	d00a      	beq.n	80005cc <BL_UART_Fetch_Host_Command+0x60>
				BL_Host_Buffer[0] = frame_length;
 80005b6:	4b4c      	ldr	r3, [pc, #304]	@ (80006e8 <BL_UART_Fetch_Host_Command+0x17c>)
 80005b8:	781a      	ldrb	r2, [r3, #0]
 80005ba:	4b4c      	ldr	r3, [pc, #304]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 80005bc:	701a      	strb	r2, [r3, #0]
				frame_index = 1;
 80005be:	4b4c      	ldr	r3, [pc, #304]	@ (80006f0 <BL_UART_Fetch_Host_Command+0x184>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
				receiving_frame = true;
 80005c4:	4b47      	ldr	r3, [pc, #284]	@ (80006e4 <BL_UART_Fetch_Host_Command+0x178>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e073      	b.n	80006b4 <BL_UART_Fetch_Host_Command+0x148>
			} else {
				// Nếu frame_length không hợp lệ, reset trạng thái
				frame_index = 0;
 80005cc:	4b48      	ldr	r3, [pc, #288]	@ (80006f0 <BL_UART_Fetch_Host_Command+0x184>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
				receiving_frame = false;
 80005d2:	4b44      	ldr	r3, [pc, #272]	@ (80006e4 <BL_UART_Fetch_Host_Command+0x178>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e06c      	b.n	80006b4 <BL_UART_Fetch_Host_Command+0x148>
			}
		} else {
			BL_Host_Buffer[frame_index++] = data;
 80005da:	4b45      	ldr	r3, [pc, #276]	@ (80006f0 <BL_UART_Fetch_Host_Command+0x184>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	b2d1      	uxtb	r1, r2
 80005e2:	4a43      	ldr	r2, [pc, #268]	@ (80006f0 <BL_UART_Fetch_Host_Command+0x184>)
 80005e4:	7011      	strb	r1, [r2, #0]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4a40      	ldr	r2, [pc, #256]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 80005ea:	7b3b      	ldrb	r3, [r7, #12]
 80005ec:	5453      	strb	r3, [r2, r1]

			if (frame_index == frame_length + 1) {
 80005ee:	4b40      	ldr	r3, [pc, #256]	@ (80006f0 <BL_UART_Fetch_Host_Command+0x184>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b3c      	ldr	r3, [pc, #240]	@ (80006e8 <BL_UART_Fetch_Host_Command+0x17c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d15a      	bne.n	80006b4 <BL_UART_Fetch_Host_Command+0x148>
				receiving_frame = false;
 80005fe:	4b39      	ldr	r3, [pc, #228]	@ (80006e4 <BL_UART_Fetch_Host_Command+0x178>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				uint16_t Host_CMD_Packet_Len = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	817b      	strh	r3, [r7, #10]
				uint32_t Host_CRC32 = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
				/* Extract the CRC32 and packet length sent by the HOST */
				Host_CMD_Packet_Len = BL_Host_Buffer[0] + 1;
 800060c:	4b37      	ldr	r3, [pc, #220]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	817b      	strh	r3, [r7, #10]
				Host_CRC32 = *((uint32_t*) ((BL_Host_Buffer
						+ Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000614:	897b      	ldrh	r3, [r7, #10]
 8000616:	3b04      	subs	r3, #4
				Host_CRC32 = *((uint32_t*) ((BL_Host_Buffer
 8000618:	4a34      	ldr	r2, [pc, #208]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 800061a:	4413      	add	r3, r2
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	607b      	str	r3, [r7, #4]
				if (CRC_VERIFICATION_FAILED
						== Bootloader_CRC_Verify((uint8_t*) &BL_Host_Buffer[0],
								Host_CMD_Packet_Len - 4, Host_CRC32)) {
 8000620:	897b      	ldrh	r3, [r7, #10]
 8000622:	3b04      	subs	r3, #4
						== Bootloader_CRC_Verify((uint8_t*) &BL_Host_Buffer[0],
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	4830      	ldr	r0, [pc, #192]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 800062a:	f000 faed 	bl	8000c08 <Bootloader_CRC_Verify>
 800062e:	4603      	mov	r3, r0
				if (CRC_VERIFICATION_FAILED
 8000630:	2b00      	cmp	r3, #0
 8000632:	d103      	bne.n	800063c <BL_UART_Fetch_Host_Command+0xd0>
					Bootloader_Send_NACK();
 8000634:	f000 fb20 	bl	8000c78 <Bootloader_Send_NACK>
					return BL_NACK;
 8000638:	2300      	movs	r3, #0
 800063a:	e04c      	b.n	80006d6 <BL_UART_Fetch_Host_Command+0x16a>
				}
				switch (BL_Host_Buffer[1]) {
 800063c:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	3b10      	subs	r3, #16
 8000642:	2b05      	cmp	r3, #5
 8000644:	d831      	bhi.n	80006aa <BL_UART_Fetch_Host_Command+0x13e>
 8000646:	a201      	add	r2, pc, #4	@ (adr r2, 800064c <BL_UART_Fetch_Host_Command+0xe0>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	08000665 	.word	0x08000665
 8000650:	08000671 	.word	0x08000671
 8000654:	0800067d 	.word	0x0800067d
 8000658:	08000689 	.word	0x08000689
 800065c:	08000695 	.word	0x08000695
 8000660:	080006a1 	.word	0x080006a1
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000664:	4821      	ldr	r0, [pc, #132]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 8000666:	f000 f845 	bl	80006f4 <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 800066a:	2301      	movs	r3, #1
 800066c:	73bb      	strb	r3, [r7, #14]
					break;
 800066e:	e01f      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0x144>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 8000672:	f000 f866 	bl	8000742 <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 8000676:	2301      	movs	r3, #1
 8000678:	73bb      	strb	r3, [r7, #14]
					break;
 800067a:	e019      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0x144>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_User_App(BL_Host_Buffer);
 800067c:	481b      	ldr	r0, [pc, #108]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 800067e:	f000 f901 	bl	8000884 <Bootloader_Jump_To_User_App>
					Status = BL_OK;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
					break;
 8000686:	e013      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0x144>
				case CBL_FLASH_ERASE_CMD:
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000688:	4818      	ldr	r0, [pc, #96]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 800068a:	f000 f97d 	bl	8000988 <Bootloader_Erase_Flash>
					Status = BL_OK;
 800068e:	2301      	movs	r3, #1
 8000690:	73bb      	strb	r3, [r7, #14]
					break;
 8000692:	e00d      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0x144>
				case CBL_MEM_WRITE_CMD:
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000694:	4815      	ldr	r0, [pc, #84]	@ (80006ec <BL_UART_Fetch_Host_Command+0x180>)
 8000696:	f000 f9f5 	bl	8000a84 <Bootloader_Memory_Write>
					Status = BL_OK;
 800069a:	2301      	movs	r3, #1
 800069c:	73bb      	strb	r3, [r7, #14]
					break;
 800069e:	e007      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0x144>
				case CBL_RESET_CHIP:
					RESET_CHIP();
 80006a0:	f000 fb08 	bl	8000cb4 <RESET_CHIP>
					Status = BL_OK;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73bb      	strb	r3, [r7, #14]
					break;
 80006a8:	e002      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0x144>
				default:
					Status = BL_NACK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
					break;
 80006ae:	bf00      	nop
				}

				return Status;
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BL_UART_Fetch_Host_Command+0x16a>
	while (byte_timeout-- && !rbuffer_empty(&p_UART1_meta->rb_rx)) {
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	73fa      	strb	r2, [r7, #15]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <BL_UART_Fetch_Host_Command+0x16a>
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <BL_UART_Fetch_Host_Command+0x174>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 ff80 	bl	80035c8 <rbuffer_empty>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f083 0301 	eor.w	r3, r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f47f af55 	bne.w	8000580 <BL_UART_Fetch_Host_Command+0x14>
			}
		}
	}
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000005c 	.word	0x2000005c
 80006e4:	20000125 	.word	0x20000125
 80006e8:	20000124 	.word	0x20000124
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	20000123 	.word	0x20000123

080006f4 <Bootloader_Get_Chip_Identification_Number>:

/************************************    Static Functions Implementations  ************************************/
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	uint16_t MCU_Identification_Number = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	81fb      	strh	r3, [r7, #14]

	/* Get the MCU chip identification number */
	MCU_Identification_Number = (uint16_t) ((DBGMCU->IDCODE) & 0x00000FFF);
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <Bootloader_Get_Chip_Identification_Number+0x30>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	b29b      	uxth	r3, r3
 8000706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800070a:	b29b      	uxth	r3, r3
 800070c:	81fb      	strh	r3, [r7, #14]
	/* Report chip identification number to HOST */
	Bootloader_Send_Data_To_Host((uint8_t*) &MCU_Identification_Number, 2);
 800070e:	f107 030e 	add.w	r3, r7, #14
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fabd 	bl	8000c94 <Bootloader_Send_Data_To_Host>

}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e0042000 	.word	0xe0042000

08000728 <CBL_STM32F401_Get_RDP_Level>:

static uint8_t CBL_STM32F401_Get_RDP_Level(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f9fc 	bl	8001b2e <HAL_FLASHEx_OBGetConfig>

	return (uint8_t) (FLASH_OBProgram.RDPLevel);
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	b2db      	uxtb	r3, r3
}
 800073a:	4618      	mov	r0, r3
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	uint8_t RDP_Level = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]

	/* Read Protection Level */
	RDP_Level = CBL_STM32F401_Get_RDP_Level();
 800074e:	f7ff ffeb 	bl	8000728 <CBL_STM32F401_Get_RDP_Level>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
	if (0xAA == RDP_Level)
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	2baa      	cmp	r3, #170	@ 0xaa
 800075a:	d102      	bne.n	8000762 <Bootloader_Read_Protection_Level+0x20>
		RDP_Level = 0x00;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e004      	b.n	800076c <Bootloader_Read_Protection_Level+0x2a>
	else if (0x55 == RDP_Level)
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	2b55      	cmp	r3, #85	@ 0x55
 8000766:	d101      	bne.n	800076c <Bootloader_Read_Protection_Level+0x2a>
		RDP_Level = 0x01;
 8000768:	2301      	movs	r3, #1
 800076a:	73fb      	strb	r3, [r7, #15]
	/* Report Valid Protection Level */
	Bootloader_Send_Data_To_Host((uint8_t*) &RDP_Level, 1);
 800076c:	f107 030f 	add.w	r3, r7, #15
 8000770:	2101      	movs	r1, #1
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fa8e 	bl	8000c94 <Bootloader_Send_Data_To_Host>

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Jump_To_App>:

_Bool Jump_To_App(uint32_t address) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if (0xFFFFFFFF != *((volatile uint32_t*) address)) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000790:	d068      	beq.n	8000864 <Jump_To_App+0xe4>
		appExists = 1;
 8000792:	4b37      	ldr	r3, [pc, #220]	@ (8000870 <Jump_To_App+0xf0>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
		Bootloader_Send_Data_To_Host((uint8_t*) &appExists, 1);
 8000798:	2101      	movs	r1, #1
 800079a:	4835      	ldr	r0, [pc, #212]	@ (8000870 <Jump_To_App+0xf0>)
 800079c:	f000 fa7a 	bl	8000c94 <Bootloader_Send_Data_To_Host>
		HAL_Delay(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f001 f89f 	bl	80018e4 <HAL_Delay>
		while (!rbuffer_empty(&p_UART1_meta->rb_tx))
 80007a6:	bf00      	nop
 80007a8:	4b32      	ldr	r3, [pc, #200]	@ (8000874 <Jump_To_App+0xf4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 ff09 	bl	80035c8 <rbuffer_empty>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f083 0301 	eor.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f2      	bne.n	80007a8 <Jump_To_App+0x28>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c2:	b672      	cpsid	i
}
 80007c4:	bf00      	nop
			;
		__disable_irq();

		// Tắt tất cả các ngắt và xóa pending interrupts
		for (uint8_t i = 0; i < 8; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	75fb      	strb	r3, [r7, #23]
 80007ca:	e010      	b.n	80007ee <Jump_To_App+0x6e>
			NVIC->ICER[i] = 0xFFFFFFFF;  // Tắt tất cả các IRQ
 80007cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000878 <Jump_To_App+0xf8>)
 80007ce:	7dfb      	ldrb	r3, [r7, #23]
 80007d0:	3320      	adds	r3, #32
 80007d2:	f04f 31ff 	mov.w	r1, #4294967295
 80007d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NVIC->ICPR[i] = 0xFFFFFFFF;  // Xóa tất cả pending IRQ
 80007da:	4a27      	ldr	r2, [pc, #156]	@ (8000878 <Jump_To_App+0xf8>)
 80007dc:	7dfb      	ldrb	r3, [r7, #23]
 80007de:	3360      	adds	r3, #96	@ 0x60
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (uint8_t i = 0; i < 8; i++) {
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	3301      	adds	r3, #1
 80007ec:	75fb      	strb	r3, [r7, #23]
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9eb      	bls.n	80007cc <Jump_To_App+0x4c>
		}

		LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 80007f4:	2010      	movs	r0, #16
 80007f6:	f7ff fe93 	bl	8000520 <LL_APB2_GRP1_ForceReset>
		LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 80007fa:	2010      	movs	r0, #16
 80007fc:	f7ff fea2 	bl	8000544 <LL_APB2_GRP1_ReleaseReset>
		// Dừng tất cả các ngoại vi đang chạy (tùy vào ứng dụng)

		HAL_RCC_DeInit();
 8000800:	f001 fff8 	bl	80027f4 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000804:	f000 ffe8 	bl	80017d8 <HAL_DeInit>

		// Xóa bộ nhớ vùng heap & stack (Optional nhưng khuyến khích)
		SCB->ICSR |= SCB_ICSR_PENDSVCLR_Msk; // Xóa pending SysTick & PendSV
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <Jump_To_App+0xfc>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <Jump_To_App+0xfc>)
 800080e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000812:	6053      	str	r3, [r2, #4]
		SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk; // Xóa pending SysTick
 8000814:	4b19      	ldr	r3, [pc, #100]	@ (800087c <Jump_To_App+0xfc>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a18      	ldr	r2, [pc, #96]	@ (800087c <Jump_To_App+0xfc>)
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800081e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
}
 8000824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000826:	f3bf 8f6f 	isb	sy
}
 800082a:	bf00      	nop
		__DSB();
		__ISB();

		// Đổi Vector Table sang firmware mới
//		__set_MSP(*((volatile uint32_t*) address));
		SCB->VTOR = address;
 800082c:	4a13      	ldr	r2, [pc, #76]	@ (800087c <Jump_To_App+0xfc>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000832:	f3bf 8f4f 	dsb	sy
}
 8000836:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000838:	f3bf 8f6f 	isb	sy
}
 800083c:	bf00      	nop

		// Đảm bảo mọi thay đổi có hiệu lực trước khi nhảy
		__DSB();
		__ISB();

		SysTick->CTRL = 0;
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <Jump_To_App+0x100>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <Jump_To_App+0x100>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;  // Đảm bảo bộ đếm cũng reset về 0
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <Jump_To_App+0x100>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000850:	b662      	cpsie	i
}
 8000852:	bf00      	nop

		__enable_irq();
		// Tắt SysTick

		// Nhảy vào firmware mới
		uint32_t MainAppAddr = *((volatile uint32_t*) (address + 4));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3304      	adds	r3, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	613b      	str	r3, [r7, #16]
		void (*reset_handler)(void) = (void(*)(void))MainAppAddr;
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	60fb      	str	r3, [r7, #12]
		reset_handler();
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4798      	blx	r3
	}
	return false;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000122 	.word	0x20000122
 8000874:	2000005c 	.word	0x2000005c
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00
 8000880:	e000e010 	.word	0xe000e010

08000884 <Bootloader_Jump_To_User_App>:

static void Bootloader_Jump_To_User_App(uint8_t *Host_Buffer) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (Host_Buffer == NULL) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d024      	beq.n	80008dc <Bootloader_Jump_To_User_App+0x58>
		return; // Tránh lỗi truy cập NULL
	}

	uint32_t app_address = ((uint32_t) Host_Buffer[2] << 24)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3302      	adds	r3, #2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	061a      	lsls	r2, r3, #24
			| ((uint32_t) Host_Buffer[3] << 16)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3303      	adds	r3, #3
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	041b      	lsls	r3, r3, #16
 80008a2:	431a      	orrs	r2, r3
			| ((uint32_t) Host_Buffer[4] << 8) | ((uint32_t) Host_Buffer[5]);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3304      	adds	r3, #4
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	4313      	orrs	r3, r2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	3205      	adds	r2, #5
 80008b2:	7812      	ldrb	r2, [r2, #0]
	uint32_t app_address = ((uint32_t) Host_Buffer[2] << 24)
 80008b4:	4313      	orrs	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

	if (!Jump_To_App(app_address)) {
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f7ff ff61 	bl	8000780 <Jump_To_App>
 80008be:	4603      	mov	r3, r0
 80008c0:	f083 0301 	eor.w	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d009      	beq.n	80008de <Bootloader_Jump_To_User_App+0x5a>
		uint8_t appExists = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	72fb      	strb	r3, [r7, #11]
		Bootloader_Send_Data_To_Host(&appExists, 1);
 80008ce:	f107 030b 	add.w	r3, r7, #11
 80008d2:	2101      	movs	r1, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f9dd 	bl	8000c94 <Bootloader_Send_Data_To_Host>
 80008da:	e000      	b.n	80008de <Bootloader_Jump_To_User_App+0x5a>
		return; // Tránh lỗi truy cập NULL
 80008dc:	bf00      	nop
	}
}
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <Perform_Flash_Erase>:
static uint8_t Perform_Flash_Erase(uint8_t Sector_Number,
		uint8_t Number_Of_Sectors) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	if (Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER) {
 80008f4:	79bb      	ldrb	r3, [r7, #6]
 80008f6:	2b0b      	cmp	r3, #11
 80008f8:	d901      	bls.n	80008fe <Perform_Flash_Erase+0x1a>
		return INVALID_SECTOR_NUMBER;  // Quá số sector cho phép
 80008fa:	2300      	movs	r3, #0
 80008fc:	e040      	b.n	8000980 <Perform_Flash_Erase+0x9c>
	}

	if (Sector_Number
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b0a      	cmp	r3, #10
 8000902:	d904      	bls.n	800090e <Perform_Flash_Erase+0x2a>
			> (CBL_FLASH_MAX_SECTOR_NUMBER - 1)&& Sector_Number != CBL_FLASH_MASS_ERASE) {
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2bff      	cmp	r3, #255	@ 0xff
 8000908:	d001      	beq.n	800090e <Perform_Flash_Erase+0x2a>
		return UNSUCCESSFUL_ERASE;  // Sector không hợp lệ
 800090a:	2302      	movs	r3, #2
 800090c:	e038      	b.n	8000980 <Perform_Flash_Erase+0x9c>
	}

	FLASH_Unlock();
 800090e:	f000 fe29 	bl	8001564 <FLASH_Unlock>

	if (Sector_Number == CBL_FLASH_MASS_ERASE) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2bff      	cmp	r3, #255	@ 0xff
 8000916:	d10c      	bne.n	8000932 <Perform_Flash_Erase+0x4e>
		uint8_t result = (FLASH_Erase_All() == FLASH_OK) ?
 8000918:	f000 ff10 	bl	800173c <FLASH_Erase_All>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <Perform_Flash_Erase+0x42>
 8000922:	2303      	movs	r3, #3
 8000924:	e000      	b.n	8000928 <Perform_Flash_Erase+0x44>
 8000926:	2302      	movs	r3, #2
 8000928:	73bb      	strb	r3, [r7, #14]
		SUCCESSFUL_ERASE :
															UNSUCCESSFUL_ERASE;
		FLASH_Lock();
 800092a:	f000 fe2f 	bl	800158c <FLASH_Lock>
		return result;
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	e026      	b.n	8000980 <Perform_Flash_Erase+0x9c>
	}

	// Đảm bảo không xóa quá giới hạn sector
	Number_Of_Sectors =
			(Sector_Number + Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER) ?
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	4413      	add	r3, r2
	Number_Of_Sectors =
 8000938:	2b0b      	cmp	r3, #11
 800093a:	dd04      	ble.n	8000946 <Perform_Flash_Erase+0x62>
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f1c3 030b 	rsb	r3, r3, #11
 8000942:	b2db      	uxtb	r3, r3
 8000944:	e000      	b.n	8000948 <Perform_Flash_Erase+0x64>
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	71bb      	strb	r3, [r7, #6]
					CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Number :
					Number_Of_Sectors;

	for (uint8_t i = 0; i < Number_Of_Sectors; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e010      	b.n	8000972 <Perform_Flash_Erase+0x8e>
		if (FLASH_Erase_Sectors(Sector_Number + i) != FLASH_OK) {
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4413      	add	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f000 feb5 	bl	80016c8 <FLASH_Erase_Sectors>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <Perform_Flash_Erase+0x88>
			FLASH_Lock();
 8000964:	f000 fe12 	bl	800158c <FLASH_Lock>
			return UNSUCCESSFUL_ERASE;
 8000968:	2302      	movs	r3, #2
 800096a:	e009      	b.n	8000980 <Perform_Flash_Erase+0x9c>
	for (uint8_t i = 0; i < Number_Of_Sectors; i++) {
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	3301      	adds	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	429a      	cmp	r2, r3
 8000978:	d3ea      	bcc.n	8000950 <Perform_Flash_Erase+0x6c>
		}
	}

	FLASH_Lock();
 800097a:	f000 fe07 	bl	800158c <FLASH_Lock>
	return SUCCESSFUL_ERASE;
 800097e:	2303      	movs	r3, #3
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	uint8_t Erase_Status = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]

	/* Perform Mass erase or sector erase of the user flash */
	if (Host_Buffer[2] == 1) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3302      	adds	r3, #2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d112      	bne.n	80009c4 <Bootloader_Erase_Flash+0x3c>
		Erase_Status = Perform_Flash_Erase(FIRMWARE1_SECTOR,
 800099e:	2105      	movs	r1, #5
 80009a0:	2005      	movs	r0, #5
 80009a2:	f7ff ff9f 	bl	80008e4 <Perform_Flash_Erase>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]
		FW1_NUM_SECTORS);
		Firmware1.is_Available = false;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <Bootloader_Erase_Flash+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
		Firmware1.address = 0;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <Bootloader_Erase_Flash+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
		Firmware1.length = 0;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <Bootloader_Erase_Flash+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
		Firmware1.crc = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <Bootloader_Erase_Flash+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	e016      	b.n	80009f2 <Bootloader_Erase_Flash+0x6a>
	} else if (Host_Buffer[2] == 2) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3302      	adds	r3, #2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d111      	bne.n	80009f2 <Bootloader_Erase_Flash+0x6a>
		Erase_Status = Perform_Flash_Erase(FIRMWARE2_SECTOR,
 80009ce:	2104      	movs	r1, #4
 80009d0:	2008      	movs	r0, #8
 80009d2:	f7ff ff87 	bl	80008e4 <Perform_Flash_Erase>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
		FW2_NUM_SECTORS);
		Firmware2.is_Available = false;
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <Bootloader_Erase_Flash+0x9c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
		Firmware2.address = 0;
 80009e0:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <Bootloader_Erase_Flash+0x9c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
		Firmware2.length = 0;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <Bootloader_Erase_Flash+0x9c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
		Firmware2.crc = 0;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <Bootloader_Erase_Flash+0x9c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
	}
	if (SUCCESSFUL_ERASE == Erase_Status) {
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d108      	bne.n	8000a0a <Bootloader_Erase_Flash+0x82>
		/* Report erase Passed */
		Flash_Write_Firmware_Info();
 80009f8:	f000 f998 	bl	8000d2c <Flash_Write_Firmware_Info>
		Bootloader_Send_Data_To_Host((uint8_t*) &Erase_Status, 1);
 80009fc:	f107 030f 	add.w	r3, r7, #15
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f946 	bl	8000c94 <Bootloader_Send_Data_To_Host>
	} else {
		/* Report erase failed */
		Bootloader_Send_Data_To_Host((uint8_t*) &Erase_Status, 1);
	}
}
 8000a08:	e005      	b.n	8000a16 <Bootloader_Erase_Flash+0x8e>
		Bootloader_Send_Data_To_Host((uint8_t*) &Erase_Status, 1);
 8000a0a:	f107 030f 	add.w	r3, r7, #15
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f93f 	bl	8000c94 <Bootloader_Send_Data_To_Host>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000010 	.word	0x20000010

08000a28 <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload,
		uint32_t Payload_Start_Address, uint16_t Payload_Len) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	80fb      	strh	r3, [r7, #6]
	FLASH_StatusTypeDef Flash_Status;

	/* Unlock the FLASH control register access */
	FLASH_Unlock();
 8000a36:	f000 fd95 	bl	8001564 <FLASH_Unlock>

	for (uint16_t i = 0; i < Payload_Len; i++) {
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	82fb      	strh	r3, [r7, #22]
 8000a3e:	e015      	b.n	8000a6c <Flash_Memory_Write_Payload+0x44>
		/* Program a byte at a specified address */
		Flash_Status = FLASH_Write_Byte(Payload_Start_Address + i,
 8000a40:	8afa      	ldrh	r2, [r7, #22]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	18d0      	adds	r0, r2, r3
				Host_Payload[i]);
 8000a46:	8afb      	ldrh	r3, [r7, #22]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4413      	add	r3, r2
		Flash_Status = FLASH_Write_Byte(Payload_Start_Address + i,
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f000 fdc8 	bl	80015e4 <FLASH_Write_Byte>
 8000a54:	4603      	mov	r3, r0
 8000a56:	757b      	strb	r3, [r7, #21]

		if (Flash_Status != FLASH_OK) {
 8000a58:	7d7b      	ldrb	r3, [r7, #21]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <Flash_Memory_Write_Payload+0x3e>
			FLASH_Lock();  // Khóa Flash trước khi thoát
 8000a5e:	f000 fd95 	bl	800158c <FLASH_Lock>
			return FLASH_PAYLOAD_WRITE_FAILED;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e009      	b.n	8000a7a <Flash_Memory_Write_Payload+0x52>
	for (uint16_t i = 0; i < Payload_Len; i++) {
 8000a66:	8afb      	ldrh	r3, [r7, #22]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	82fb      	strh	r3, [r7, #22]
 8000a6c:	8afa      	ldrh	r2, [r7, #22]
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e5      	bcc.n	8000a40 <Flash_Memory_Write_Payload+0x18>
		}
	}

	/* Khóa Flash sau khi hoàn tất ghi */
	FLASH_Lock();
 8000a74:	f000 fd8a 	bl	800158c <FLASH_Lock>
	return FLASH_PAYLOAD_WRITE_PASSED;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer) {
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

	uint32_t HOST_Address = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
	uint8_t Payload_Len = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	74fb      	strb	r3, [r7, #19]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a94:	2300      	movs	r3, #0
 8000a96:	737b      	strb	r3, [r7, #13]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	733b      	strb	r3, [r7, #12]
	uint16_t Frame_Index = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	823b      	strh	r3, [r7, #16]
	uint16_t Total_Frame = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81fb      	strh	r3, [r7, #14]

	Frame_Index = *((uint16_t*) (&Host_Buffer[7]));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8000aaa:	823b      	strh	r3, [r7, #16]
	Total_Frame = *((uint16_t*) (&Host_Buffer[9]));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8000ab2:	81fb      	strh	r3, [r7, #14]

	/* Extract the CRC32 and packet length sent by the HOST */
	HOST_Address = *((uint32_t*) (&Host_Buffer[2]));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000aba:	617b      	str	r3, [r7, #20]
	if ((HOST_Address == FIRMWARE1_ADDRESS)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	4a39      	ldr	r2, [pc, #228]	@ (8000ba4 <Bootloader_Memory_Write+0x120>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d003      	beq.n	8000acc <Bootloader_Memory_Write+0x48>
			|| (HOST_Address == FIRMWARE2_ADDRESS)) {
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4a38      	ldr	r2, [pc, #224]	@ (8000ba8 <Bootloader_Memory_Write+0x124>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d108      	bne.n	8000ade <Bootloader_Memory_Write+0x5a>
		Temp_Firmware.address = HOST_Address;
 8000acc:	4a37      	ldr	r2, [pc, #220]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	6053      	str	r3, [r2, #4]
		Temp_Firmware.crc = 0;
 8000ad2:	4b36      	ldr	r3, [pc, #216]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
		Temp_Firmware.length = 0;
 8000ad8:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
	}

	/* Extract the payload length from the Host packet */
	Payload_Len = Host_Buffer[6];
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	799b      	ldrb	r3, [r3, #6]
 8000ae2:	74fb      	strb	r3, [r7, #19]
	/* Verify the Extracted address to be valid address */
	Address_Verification = Host_Address_Verification(HOST_Address);
 8000ae4:	6978      	ldr	r0, [r7, #20]
 8000ae6:	f000 f867 	bl	8000bb8 <Host_Address_Verification>
 8000aea:	4603      	mov	r3, r0
 8000aec:	737b      	strb	r3, [r7, #13]
	if (ADDRESS_IS_VALID == Address_Verification) {
 8000aee:	7b7b      	ldrb	r3, [r7, #13]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d14b      	bne.n	8000b8c <Bootloader_Memory_Write+0x108>
		/* Write the payload to the Flash memory */
		Flash_Payload_Write_Status = Flash_Memory_Write_Payload(
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	330b      	adds	r3, #11
 8000af8:	7cfa      	ldrb	r2, [r7, #19]
 8000afa:	b292      	uxth	r2, r2
 8000afc:	6979      	ldr	r1, [r7, #20]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff92 	bl	8000a28 <Flash_Memory_Write_Payload>
 8000b04:	4603      	mov	r3, r0
 8000b06:	733b      	strb	r3, [r7, #12]
				(uint8_t*) &Host_Buffer[11], HOST_Address, Payload_Len);
		if (FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) {
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d137      	bne.n	8000b7e <Bootloader_Memory_Write+0xfa>
			Temp_Firmware.length += Payload_Len;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	7cfb      	ldrb	r3, [r7, #19]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a25      	ldr	r2, [pc, #148]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b18:	6093      	str	r3, [r2, #8]
			if (Frame_Index == (Total_Frame - 1)) {
 8000b1a:	8a3a      	ldrh	r2, [r7, #16]
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d125      	bne.n	8000b70 <Bootloader_Memory_Write+0xec>
				Temp_Firmware.crc = Firmware_CRC_Verification(Temp_Firmware);
 8000b24:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b28:	f000 f8d2 	bl	8000cd0 <Firmware_CRC_Verification>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b30:	60d3      	str	r3, [r2, #12]
				if (Temp_Firmware.address == FIRMWARE1_ADDRESS) {
 8000b32:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <Bootloader_Memory_Write+0x120>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d109      	bne.n	8000b50 <Bootloader_Memory_Write+0xcc>
					Firmware1 = Temp_Firmware;
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb0 <Bootloader_Memory_Write+0x12c>)
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b40:	4614      	mov	r4, r2
 8000b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Firmware1.is_Available = true;
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <Bootloader_Memory_Write+0x12c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e00d      	b.n	8000b6c <Bootloader_Memory_Write+0xe8>
				} else if (Temp_Firmware.address == FIRMWARE2_ADDRESS) {
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <Bootloader_Memory_Write+0x124>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d108      	bne.n	8000b6c <Bootloader_Memory_Write+0xe8>
					Firmware2 = Temp_Firmware;
 8000b5a:	4a16      	ldr	r2, [pc, #88]	@ (8000bb4 <Bootloader_Memory_Write+0x130>)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <Bootloader_Memory_Write+0x128>)
 8000b5e:	4614      	mov	r4, r2
 8000b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Firmware2.is_Available = true;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <Bootloader_Memory_Write+0x130>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
				}
				Flash_Write_Firmware_Info();
 8000b6c:	f000 f8de 	bl	8000d2c <Flash_Write_Firmware_Info>
			}
			/* Report payload write passed */
			Bootloader_Send_Data_To_Host((uint8_t*) &Flash_Payload_Write_Status,
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f88c 	bl	8000c94 <Bootloader_Send_Data_To_Host>
		/* Report address verification failed */
		Address_Verification = ADDRESS_IS_INVALID;
		Bootloader_Send_Data_To_Host((uint8_t*) &Address_Verification, 1);
	}

}
 8000b7c:	e00e      	b.n	8000b9c <Bootloader_Memory_Write+0x118>
			Bootloader_Send_Data_To_Host((uint8_t*) &Flash_Payload_Write_Status,
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2101      	movs	r1, #1
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f885 	bl	8000c94 <Bootloader_Send_Data_To_Host>
}
 8000b8a:	e007      	b.n	8000b9c <Bootloader_Memory_Write+0x118>
		Address_Verification = ADDRESS_IS_INVALID;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	737b      	strb	r3, [r7, #13]
		Bootloader_Send_Data_To_Host((uint8_t*) &Address_Verification, 1);
 8000b90:	f107 030d 	add.w	r3, r7, #13
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f87c 	bl	8000c94 <Bootloader_Send_Data_To_Host>
}
 8000b9c:	bf00      	nop
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	08020000 	.word	0x08020000
 8000ba8:	080c0000 	.word	0x080c0000
 8000bac:	2000007c 	.word	0x2000007c
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000010 	.word	0x20000010

08000bb8 <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

	if ((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F407_SRAM_END)) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bca:	d306      	bcc.n	8000bda <Host_Address_Verification+0x22>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <Host_Address_Verification+0x4c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d802      	bhi.n	8000bda <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e00c      	b.n	8000bf4 <Host_Address_Verification+0x3c>
	} else if ((Jump_Address >= FLASH_BASE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000be0:	d306      	bcc.n	8000bf0 <Host_Address_Verification+0x38>
			&& (Jump_Address <= STM32F407_FLASH_END)) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000be8:	d802      	bhi.n	8000bf0 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e001      	b.n	8000bf4 <Host_Address_Verification+0x3c>
	} else {
		Address_Verification = ADDRESS_IS_INVALID;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20030000 	.word	0x20030000

08000c08 <Bootloader_CRC_Verify>:

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len,
		uint32_t Host_CRC) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	@ 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000c14:	2300      	movs	r3, #0
 8000c16:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
	if (Data_Len == 0xFFFFFFFF)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c22:	d102      	bne.n	8000c2a <Bootloader_CRC_Verify+0x22>
		return MCU_CRC_Calculated;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	e01d      	b.n	8000c66 <Bootloader_CRC_Verify+0x5e>
	CRC->CR = CRC_CR_RESET;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <Bootloader_CRC_Verify+0x6c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	609a      	str	r2, [r3, #8]
	for (unsigned int i = 0; i < Data_Len; i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	e008      	b.n	8000c48 <Bootloader_CRC_Verify+0x40>
		CRC->DR = (uint32_t) pData[i];
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <Bootloader_CRC_Verify+0x6c>)
 8000c40:	601a      	str	r2, [r3, #0]
	for (unsigned int i = 0; i < Data_Len; i++) {
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d3f2      	bcc.n	8000c36 <Bootloader_CRC_Verify+0x2e>
	}
	if (CRC->DR == Host_CRC) {
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <Bootloader_CRC_Verify+0x6c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d102      	bne.n	8000c60 <Bootloader_CRC_Verify+0x58>
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	77fb      	strb	r3, [r7, #31]
 8000c5e:	e001      	b.n	8000c64 <Bootloader_CRC_Verify+0x5c>
	} else {
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000c60:	2300      	movs	r3, #0
 8000c62:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8000c64:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	@ 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023000 	.word	0x40023000

08000c78 <Bootloader_Send_NACK>:
		CRC->DR = (uint32_t) pData[i];
	}
	*InitVal = CRC->DR;
}

static void Bootloader_Send_NACK(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 8000c7e:	23ab      	movs	r3, #171	@ 0xab
 8000c80:	71fb      	strb	r3, [r7, #7]
	USART1_send_array((const char*) &Ack_Value, 1);
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	2101      	movs	r1, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fe67 	bl	800395a <USART1_send_array>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer,
		uint32_t Data_Len) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	USART1_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f002 fe58 	bl	800395a <USART1_send_array>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <RESET_CHIP>:

static void RESET_CHIP(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
	__disable_irq();

	SysTick->CTRL = 0;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <RESET_CHIP+0x18>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000cc2:	4b02      	ldr	r3, [pc, #8]	@ (8000ccc <RESET_CHIP+0x18>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]

	NVIC_SystemReset();
 8000cc8:	f7ff fc14 	bl	80004f4 <__NVIC_SystemReset>
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <Firmware_CRC_Verification>:
}

static uint32_t Firmware_CRC_Verification(s_firmware_info fw) {
 8000cd0:	b490      	push	{r4, r7}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	463c      	mov	r4, r7
 8000cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (fw.length == 0)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <Firmware_CRC_Verification+0x16>
		return 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e01a      	b.n	8000d1c <Firmware_CRC_Verification+0x4c>

	uint32_t address = fw.address;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	61fb      	str	r3, [r7, #28]
	uint32_t end_address = fw.address + fw.length;
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
	uint8_t data = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	75fb      	strb	r3, [r7, #23]

	CRC->CR = CRC_CR_RESET;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <Firmware_CRC_Verification+0x58>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	609a      	str	r2, [r3, #8]

	while (address < end_address) {
 8000cfc:	e008      	b.n	8000d10 <Firmware_CRC_Verification+0x40>
		data = *(uint8_t*) address;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	75fb      	strb	r3, [r7, #23]
		CRC->DR = (uint32_t) data;
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <Firmware_CRC_Verification+0x58>)
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	6013      	str	r3, [r2, #0]
		address++;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
	while (address < end_address) {
 8000d10:	69fa      	ldr	r2, [r7, #28]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d3f2      	bcc.n	8000cfe <Firmware_CRC_Verification+0x2e>
	}

	return CRC->DR;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <Firmware_CRC_Verification+0x58>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc90      	pop	{r4, r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023000 	.word	0x40023000

08000d2c <Flash_Write_Firmware_Info>:

static uint8_t Flash_Write_Firmware_Info(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 8000d32:	f000 fc17 	bl	8001564 <FLASH_Unlock>

	if (FLASH_Erase_Sectors(FIRMWARE_SAVE_SECTOR) != FLASH_OK) {
 8000d36:	2002      	movs	r0, #2
 8000d38:	f000 fcc6 	bl	80016c8 <FLASH_Erase_Sectors>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <Flash_Write_Firmware_Info+0x1e>
		FLASH_Lock();
 8000d42:	f000 fc23 	bl	800158c <FLASH_Lock>
		return FLASH_PAYLOAD_WRITE_FAILED;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e03e      	b.n	8000dc8 <Flash_Write_Firmware_Info+0x9c>
	}

	uint8_t *data_ptr = (uint8_t*) &Firmware1;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <Flash_Write_Firmware_Info+0xa4>)
 8000d4c:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < sizeof(s_firmware_info); i += 4) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e016      	b.n	8000d82 <Flash_Write_Firmware_Info+0x56>
		if (FLASH_Write_Word(FIRMWARE_SAVE + i, *(uint32_t*) (data_ptr + i))
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000d5a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	440a      	add	r2, r1
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fc73 	bl	8001654 <FLASH_Write_Word>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <Flash_Write_Firmware_Info+0x50>
				!= FLASH_OK) {
			FLASH_Lock();
 8000d74:	f000 fc0a 	bl	800158c <FLASH_Lock>
			return FLASH_PAYLOAD_WRITE_FAILED;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e025      	b.n	8000dc8 <Flash_Write_Firmware_Info+0x9c>
	for (uint32_t i = 0; i < sizeof(s_firmware_info); i += 4) {
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d9e5      	bls.n	8000d54 <Flash_Write_Firmware_Info+0x28>
		}
	}

	/* Ghi cả struct Firmware2 */
	data_ptr = (uint8_t*) &Firmware2;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <Flash_Write_Firmware_Info+0xa8>)
 8000d8a:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < sizeof(s_firmware_info); i += 4) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e014      	b.n	8000dbc <Flash_Write_Firmware_Info+0x90>
		if (FLASH_Write_Word(FIRMWARE_SAVE + sizeof(s_firmware_info) + i,
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <Flash_Write_Firmware_Info+0xac>)
 8000d96:	4413      	add	r3, r2
				*(uint32_t*) (data_ptr + i)) != FLASH_OK) {
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	440a      	add	r2, r1
		if (FLASH_Write_Word(FIRMWARE_SAVE + sizeof(s_firmware_info) + i,
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fc56 	bl	8001654 <FLASH_Write_Word>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <Flash_Write_Firmware_Info+0x8a>
			FLASH_Lock();
 8000dae:	f000 fbed 	bl	800158c <FLASH_Lock>
			return FLASH_PAYLOAD_WRITE_FAILED;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e008      	b.n	8000dc8 <Flash_Write_Firmware_Info+0x9c>
	for (uint32_t i = 0; i < sizeof(s_firmware_info); i += 4) {
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3304      	adds	r3, #4
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	d9e7      	bls.n	8000d92 <Flash_Write_Firmware_Info+0x66>
		}
	}

	FLASH_Lock();
 8000dc2:	f000 fbe3 	bl	800158c <FLASH_Lock>
	return FLASH_PAYLOAD_WRITE_PASSED;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000010 	.word	0x20000010
 8000dd8:	08008010 	.word	0x08008010

08000ddc <Flash_Read_Firmware_Info>:

static void Flash_Read_Firmware_Info(void) {
 8000ddc:	b490      	push	{r4, r7}
 8000dde:	af00      	add	r7, sp, #0
	memcpy(&Temp_Firmware, (void*) FIRMWARE_SAVE, sizeof(s_firmware_info));
 8000de0:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <Flash_Read_Firmware_Info+0x50>)
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <Flash_Read_Firmware_Info+0x54>)
 8000de4:	4614      	mov	r4, r2
 8000de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (Temp_Firmware.address != 0xFFFFFFFF) {
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <Flash_Read_Firmware_Info+0x50>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <Flash_Read_Firmware_Info+0x26>
		memcpy(&Firmware1, &Temp_Firmware, sizeof(s_firmware_info));
 8000df6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e34 <Flash_Read_Firmware_Info+0x58>)
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <Flash_Read_Firmware_Info+0x50>)
 8000dfa:	4614      	mov	r4, r2
 8000dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
	memcpy(&Temp_Firmware, (void*) (FIRMWARE_SAVE + sizeof(s_firmware_info)),
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <Flash_Read_Firmware_Info+0x50>)
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <Flash_Read_Firmware_Info+0x5c>)
 8000e06:	4614      	mov	r4, r2
 8000e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			sizeof(s_firmware_info));
	if (Temp_Firmware.address != 0xFFFFFFFF) {
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <Flash_Read_Firmware_Info+0x50>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e16:	d005      	beq.n	8000e24 <Flash_Read_Firmware_Info+0x48>
		memcpy(&Firmware2, &Temp_Firmware, sizeof(s_firmware_info));
 8000e18:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <Flash_Read_Firmware_Info+0x60>)
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <Flash_Read_Firmware_Info+0x50>)
 8000e1c:	4614      	mov	r4, r2
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc90      	pop	{r4, r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	2000007c 	.word	0x2000007c
 8000e30:	08008000 	.word	0x08008000
 8000e34:	20000000 	.word	0x20000000
 8000e38:	08008010 	.word	0x08008010
 8000e3c:	20000010 	.word	0x20000010

08000e40 <Firmware_Check_Available>:

void Firmware_Check_Available() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	uint32_t CRC_Result = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
	Flash_Read_Firmware_Info();
 8000e4a:	f7ff ffc7 	bl	8000ddc <Flash_Read_Firmware_Info>

	if (Firmware1.is_Available == true) {
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <Firmware_Check_Available+0x88>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d016      	beq.n	8000e84 <Firmware_Check_Available+0x44>
		USART1_send_string("Firmware 1 CRC checking...\n");
 8000e56:	481d      	ldr	r0, [pc, #116]	@ (8000ecc <Firmware_Check_Available+0x8c>)
 8000e58:	f002 fd6a 	bl	8003930 <USART1_send_string>
		CRC_Result = Firmware_CRC_Verification(Firmware1);
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <Firmware_Check_Available+0x88>)
 8000e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e60:	f7ff ff36 	bl	8000cd0 <Firmware_CRC_Verification>
 8000e64:	6078      	str	r0, [r7, #4]
		if (CRC_Result == Firmware1.crc) {
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <Firmware_Check_Available+0x88>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d109      	bne.n	8000e84 <Firmware_Check_Available+0x44>
			USART1_send_string("Firmware 1 CRC successfully checked\n");
 8000e70:	4817      	ldr	r0, [pc, #92]	@ (8000ed0 <Firmware_Check_Available+0x90>)
 8000e72:	f002 fd5d 	bl	8003930 <USART1_send_string>
			USART1_send_string("Chosing Firmware 1 for auto boot\n");
 8000e76:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <Firmware_Check_Available+0x94>)
 8000e78:	f002 fd5a 	bl	8003930 <USART1_send_string>
			firmware_sel = 1;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <Firmware_Check_Available+0x98>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
			return;
 8000e82:	e01d      	b.n	8000ec0 <Firmware_Check_Available+0x80>
		}
	}

	if (Firmware2.is_Available == true) {
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <Firmware_Check_Available+0x9c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d016      	beq.n	8000eba <Firmware_Check_Available+0x7a>
		USART1_send_string("Firmware 2 CRC checking...\n");
 8000e8c:	4814      	ldr	r0, [pc, #80]	@ (8000ee0 <Firmware_Check_Available+0xa0>)
 8000e8e:	f002 fd4f 	bl	8003930 <USART1_send_string>
		CRC_Result = Firmware_CRC_Verification(Firmware2);
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <Firmware_Check_Available+0x9c>)
 8000e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e96:	f7ff ff1b 	bl	8000cd0 <Firmware_CRC_Verification>
 8000e9a:	6078      	str	r0, [r7, #4]
		if (CRC_Result == Firmware2.crc) {
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <Firmware_Check_Available+0x9c>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d109      	bne.n	8000eba <Firmware_Check_Available+0x7a>
			USART1_send_string("Firmware 2 CRC successfully checked\n");
 8000ea6:	480f      	ldr	r0, [pc, #60]	@ (8000ee4 <Firmware_Check_Available+0xa4>)
 8000ea8:	f002 fd42 	bl	8003930 <USART1_send_string>
			USART1_send_string("Chosing Firmware 2 for auto boot\n");
 8000eac:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <Firmware_Check_Available+0xa8>)
 8000eae:	f002 fd3f 	bl	8003930 <USART1_send_string>
			firmware_sel = 2;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <Firmware_Check_Available+0x98>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	701a      	strb	r2, [r3, #0]
			return;
 8000eb8:	e002      	b.n	8000ec0 <Firmware_Check_Available+0x80>
		}
	}
	USART1_send_string("No firmware dectected");
 8000eba:	480c      	ldr	r0, [pc, #48]	@ (8000eec <Firmware_Check_Available+0xac>)
 8000ebc:	f002 fd38 	bl	8003930 <USART1_send_string>
}
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	08003ad4 	.word	0x08003ad4
 8000ed0:	08003af0 	.word	0x08003af0
 8000ed4:	08003b18 	.word	0x08003b18
 8000ed8:	20000020 	.word	0x20000020
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	08003b3c 	.word	0x08003b3c
 8000ee4:	08003b58 	.word	0x08003b58
 8000ee8:	08003b80 	.word	0x08003b80
 8000eec:	08003ba4 	.word	0x08003ba4

08000ef0 <Wait_For_Request>:

void Wait_For_Request() {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();
 8000ef6:	f000 fce9 	bl	80018cc <HAL_GetTick>
 8000efa:	6078      	str	r0, [r7, #4]
	USART1_send_string("Bootloader wait for command\n");
 8000efc:	481f      	ldr	r0, [pc, #124]	@ (8000f7c <Wait_For_Request+0x8c>)
 8000efe:	f002 fd17 	bl	8003930 <USART1_send_string>
	while (rbuffer_empty(&p_UART1_meta->rb_rx)) {
 8000f02:	e02f      	b.n	8000f64 <Wait_For_Request+0x74>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000f04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f08:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <Wait_For_Request+0x90>)
 8000f0a:	f001 f834 	bl	8001f76 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000f0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f12:	f000 fce7 	bl	80018e4 <HAL_Delay>
		if (HAL_GetTick() - tick > 10000) {
 8000f16:	f000 fcd9 	bl	80018cc <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d91d      	bls.n	8000f64 <Wait_For_Request+0x74>
			if (firmware_sel == 1) {
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <Wait_For_Request+0x94>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <Wait_For_Request+0x52>
				USART1_send_string("Timeout, jump to Firmware 1\n");
 8000f30:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <Wait_For_Request+0x98>)
 8000f32:	f002 fcfd 	bl	8003930 <USART1_send_string>
				Jump_To_App(Firmware1.address);
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <Wait_For_Request+0x9c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fc20 	bl	8000780 <Jump_To_App>
				return;
 8000f40:	e018      	b.n	8000f74 <Wait_For_Request+0x84>
			} else if (firmware_sel == 2) {
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <Wait_For_Request+0x94>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d108      	bne.n	8000f5c <Wait_For_Request+0x6c>
				USART1_send_string("Timeout, jump to Firmware 2\n");
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <Wait_For_Request+0xa0>)
 8000f4c:	f002 fcf0 	bl	8003930 <USART1_send_string>
				Jump_To_App(Firmware2.address);
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <Wait_For_Request+0xa4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fc13 	bl	8000780 <Jump_To_App>
				return;
 8000f5a:	e00b      	b.n	8000f74 <Wait_For_Request+0x84>
			} else {
				USART1_send_string("Timeout, no firmware dectected");
 8000f5c:	480e      	ldr	r0, [pc, #56]	@ (8000f98 <Wait_For_Request+0xa8>)
 8000f5e:	f002 fce7 	bl	8003930 <USART1_send_string>
				return;
 8000f62:	e007      	b.n	8000f74 <Wait_For_Request+0x84>
	while (rbuffer_empty(&p_UART1_meta->rb_rx)) {
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <Wait_For_Request+0xac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 fb2d 	bl	80035c8 <rbuffer_empty>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1c7      	bne.n	8000f04 <Wait_For_Request+0x14>
			}
		}
	}
}
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08003bbc 	.word	0x08003bbc
 8000f80:	40020400 	.word	0x40020400
 8000f84:	20000020 	.word	0x20000020
 8000f88:	08003bdc 	.word	0x08003bdc
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	08003bfc 	.word	0x08003bfc
 8000f94:	20000010 	.word	0x20000010
 8000f98:	08003c1c 	.word	0x08003c1c
 8000f9c:	2000005c 	.word	0x2000005c

08000fa0 <__NVIC_GetPriorityGrouping>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	@ (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	@ (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	@ (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	615a      	str	r2, [r3, #20]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <LL_AHB1_GRP1_EnableClock>:
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800110a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800110c:	4907      	ldr	r1, [pc, #28]	@ (800112c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40023800 	.word	0x40023800

08001130 <LL_APB2_GRP1_EnableClock>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <LL_APB2_GRP1_EnableClock+0x2c>)
 800113a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <LL_APB2_GRP1_EnableClock+0x2c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800

08001160 <Status_Led>:
                            0,                          //count from start
                            true                        //is active
                    },
                };
static void Status_Led(void*)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001168:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <Status_Led+0x1c>)
 800116e:	f000 ff02 	bl	8001f76 <HAL_GPIO_TogglePin>
//	USART1_send_string("Bootloader Firmware\n");
 //   USART3_send_string("HELLO\r\n");
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020400 	.word	0x40020400

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f000 fb06 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f810 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  Jump_To_App(0x0800C000);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 f8e2 	bl	8001354 <MX_GPIO_Init>
  MX_CRC_Init();
 8001190:	f000 f86c 	bl	800126c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001194:	f000 f87e 	bl	8001294 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  USART1_init();
 8001198:	f002 fb8e 	bl	80038b8 <USART1_init>
  Firmware_Check_Available();
 800119c:	f7ff fe50 	bl	8000e40 <Firmware_Check_Available>
  Wait_For_Request();
 80011a0:	f7ff fea6 	bl	8000ef0 <Wait_For_Request>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SchedulerRun();
 80011a4:	f002 fc04 	bl	80039b0 <SchedulerRun>
 80011a8:	e7fc      	b.n	80011a4 <main+0x24>
	...

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	@ 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	@ 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fc52 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <SystemClock_Config+0xb8>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	4a22      	ldr	r2, [pc, #136]	@ (8001264 <SystemClock_Config+0xb8>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e0:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <SystemClock_Config+0xb8>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <SystemClock_Config+0xbc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <SystemClock_Config+0xbc>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <SystemClock_Config+0xbc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2310      	movs	r3, #16
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fec5 	bl	8001fac <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001228:	f000 f8d8 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001238:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001242:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f926 	bl	800249c <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001256:	f000 f8c1 	bl	80013dc <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3750      	adds	r7, #80	@ 0x50
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_CRC_Init+0x20>)
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <MX_CRC_Init+0x24>)
 8001274:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_CRC_Init+0x20>)
 8001278:	f000 fc3d 	bl	8001af6 <HAL_CRC_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001282:	f000 f8ab 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000128 	.word	0x20000128
 8001290:	40023000 	.word	0x40023000

08001294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	@ 0x38
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80012be:	2010      	movs	r0, #16
 80012c0:	f7ff ff36 	bl	8001130 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff ff1b 	bl	8001100 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80012ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012e0:	2307      	movs	r3, #7
 80012e2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4818      	ldr	r0, [pc, #96]	@ (800134c <MX_USART1_UART_Init+0xb8>)
 80012ea:	f001 fc9c 	bl	8002c26 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012ee:	f7ff fe57 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fea7 	bl	800104c <NVIC_EncodePriority>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	2025      	movs	r0, #37	@ 0x25
 8001304:	f7ff fe78 	bl	8000ff8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001308:	2025      	movs	r0, #37	@ 0x25
 800130a:	f7ff fe57 	bl	8000fbc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800130e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001312:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001320:	230c      	movs	r3, #12
 8001322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <MX_USART1_UART_Init+0xbc>)
 8001334:	f002 f89a 	bl	800346c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_USART1_UART_Init+0xbc>)
 800133a:	f7ff feca 	bl	80010d2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800133e:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_USART1_UART_Init+0xbc>)
 8001340:	f7ff feb7 	bl	80010b2 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3738      	adds	r7, #56	@ 0x38
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40020000 	.word	0x40020000
 8001350:	40011000 	.word	0x40011000

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <MX_GPIO_Init+0x80>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a18      	ldr	r2, [pc, #96]	@ (80013d4 <MX_GPIO_Init+0x80>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <MX_GPIO_Init+0x80>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_GPIO_Init+0x80>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <MX_GPIO_Init+0x80>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_GPIO_Init+0x80>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013a8:	480b      	ldr	r0, [pc, #44]	@ (80013d8 <MX_GPIO_Init+0x84>)
 80013aa:	f000 fdcb 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_GPIO_Init+0x84>)
 80013c8:	f000 fc20 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_CRC_MspInit+0x3c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10d      	bne.n	8001466 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_CRC_MspInit+0x40>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <HAL_CRC_MspInit+0x40>)
 8001454:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_CRC_MspInit+0x40>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023000 	.word	0x40023000
 8001478:	40023800 	.word	0x40023800

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x4>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 80014d2:	f002 fa5f 	bl	8003994 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 f9e5 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}

080014de <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART1_IRQ();
 80014e2:	f002 f997 	bl	8003814 <USART1_IRQ>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001548 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001514:	f7ff ffea 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	@ (8001550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	@ (800155c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f002 fa99 	bl	8003a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7ff fe1d 	bl	8001180 <main>
  bx  lr    
 8001546:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001548:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001554:	08003c64 	.word	0x08003c64
  ldr r2, =_sbss
 8001558:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800155c:	20000348 	.word	0x20000348

08001560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC_IRQHandler>
	...

08001564 <FLASH_Unlock>:
#define FLASH_TIMEOUT_INT 50000  // Giới hạn vòng lặp chờ (tránh treo)
#define FLASH_BASE_ADDRESS FLASH_SECTOR1_BASE_ADDRESS  // Địa chỉ lưu firmware



void FLASH_Unlock() {
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
    FLASH->KEYR = 0x45670123;  // Mở khóa bước 1
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <FLASH_Unlock+0x1c>)
 800156a:	4a06      	ldr	r2, [pc, #24]	@ (8001584 <FLASH_Unlock+0x20>)
 800156c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;  // Mở khóa bước 2
 800156e:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <FLASH_Unlock+0x1c>)
 8001570:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <FLASH_Unlock+0x24>)
 8001572:	605a      	str	r2, [r3, #4]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00
 8001584:	45670123 	.word	0x45670123
 8001588:	cdef89ab 	.word	0xcdef89ab

0800158c <FLASH_Lock>:

void FLASH_Lock() {
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
    FLASH->CR |= FLASH_CR_LOCK;  // Khóa lại Flash
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <FLASH_Lock+0x1c>)
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <FLASH_Lock+0x1c>)
 8001596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800159a:	6113      	str	r3, [r2, #16]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00

080015ac <FLASH_WaitForOperation>:

static FLASH_StatusTypeDef FLASH_WaitForOperation(uint32_t timeout) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    while (FLASH->SR & FLASH_SR_BSY) {
 80015b4:	e009      	b.n	80015ca <FLASH_WaitForOperation+0x1e>
        if (timeout-- == 0) return FLASH_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1e5a      	subs	r2, r3, #1
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <FLASH_WaitForOperation+0x18>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e009      	b.n	80015d8 <FLASH_WaitForOperation+0x2c>
        HAL_Delay(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f000 f98d 	bl	80018e4 <HAL_Delay>
    while (FLASH->SR & FLASH_SR_BSY) {
 80015ca:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <FLASH_WaitForOperation+0x34>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ef      	bne.n	80015b6 <FLASH_WaitForOperation+0xa>
    }
    return FLASH_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <FLASH_Write_Byte>:

// 🔹 Ghi 1 BYTE (8-bit)
FLASH_StatusTypeDef FLASH_Write_Byte(uint32_t address, uint8_t data) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 80015f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015f4:	f7ff ffda 	bl	80015ac <FLASH_WaitForOperation>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <FLASH_Write_Byte+0x1e>
 80015fe:	2303      	movs	r3, #3
 8001600:	e022      	b.n	8001648 <FLASH_Write_Byte+0x64>

    FLASH->CR &= ~FLASH_CR_PSIZE;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 8001608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800160c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;  // Chế độ ghi 1 byte
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 8001610:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;  // Cho phép ghi
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6113      	str	r3, [r2, #16]

    *(volatile uint8_t*)address = data;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	701a      	strb	r2, [r3, #0]

    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 8001628:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800162c:	f7ff ffbe 	bl	80015ac <FLASH_WaitForOperation>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <FLASH_Write_Byte+0x56>
 8001636:	2303      	movs	r3, #3
 8001638:	e006      	b.n	8001648 <FLASH_Write_Byte+0x64>

    FLASH->CR &= ~FLASH_CR_PG;  // Tắt chế độ ghi
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <FLASH_Write_Byte+0x6c>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6113      	str	r3, [r2, #16]
    return FLASH_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023c00 	.word	0x40023c00

08001654 <FLASH_Write_Word>:
    FLASH->CR &= ~FLASH_CR_PG;
    return FLASH_OK;
}

// 🔹 Ghi 4 BYTE (32-bit)
FLASH_StatusTypeDef FLASH_Write_Word(uint32_t address, uint32_t data) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 800165e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001662:	f7ff ffa3 	bl	80015ac <FLASH_WaitForOperation>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <FLASH_Write_Word+0x1c>
 800166c:	2303      	movs	r3, #3
 800166e:	e024      	b.n	80016ba <FLASH_Write_Word+0x66>

    FLASH->CR &= ~FLASH_CR_PSIZE;
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <FLASH_Write_Word+0x70>)
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <FLASH_Write_Word+0x70>)
 8001676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800167a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;  // Chế độ ghi 4 byte
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <FLASH_Write_Word+0x70>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <FLASH_Write_Word+0x70>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001686:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <FLASH_Write_Word+0x70>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <FLASH_Write_Word+0x70>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6113      	str	r3, [r2, #16]

    *(volatile uint32_t*)address = data;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]

    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 800169a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800169e:	f7ff ff85 	bl	80015ac <FLASH_WaitForOperation>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <FLASH_Write_Word+0x58>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e006      	b.n	80016ba <FLASH_Write_Word+0x66>

    FLASH->CR &= ~FLASH_CR_PG;
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <FLASH_Write_Word+0x70>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <FLASH_Write_Word+0x70>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6113      	str	r3, [r2, #16]
    return FLASH_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <FLASH_Erase_Sectors>:

FLASH_StatusTypeDef FLASH_Erase_Sectors(uint8_t sector) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]

    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 80016d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016d6:	f7ff ff69 	bl	80015ac <FLASH_WaitForOperation>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <FLASH_Erase_Sectors+0x1c>
 80016e0:	2303      	movs	r3, #3
 80016e2:	e024      	b.n	800172e <FLASH_Erase_Sectors+0x66>

    FLASH->CR &= ~FLASH_CR_SNB;  // Xóa lựa chọn sector cũ
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 80016ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016ee:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | (sector << FLASH_CR_SNB_Pos);  // Chọn sector cần xóa
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;  // Bắt đầu xóa
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	4a0c      	ldr	r2, [pc, #48]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6113      	str	r3, [r2, #16]

    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 800170e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001712:	f7ff ff4b 	bl	80015ac <FLASH_WaitForOperation>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <FLASH_Erase_Sectors+0x58>
 800171c:	2303      	movs	r3, #3
 800171e:	e006      	b.n	800172e <FLASH_Erase_Sectors+0x66>

    FLASH->CR &= ~FLASH_CR_SER;  // Tắt chế độ xóa sector
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <FLASH_Erase_Sectors+0x70>)
 8001726:	f023 0302 	bic.w	r3, r3, #2
 800172a:	6113      	str	r3, [r2, #16]
    return FLASH_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00

0800173c <FLASH_Erase_All>:

// 🔹 Xóa toàn bộ Flash (tùy chọn không xóa bootloader)
FLASH_StatusTypeDef FLASH_Erase_All(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 8001740:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001744:	f7ff ff32 	bl	80015ac <FLASH_WaitForOperation>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <FLASH_Erase_All+0x16>
 800174e:	2303      	movs	r3, #3
 8001750:	e01b      	b.n	800178a <FLASH_Erase_All+0x4e>

    FLASH->CR |= FLASH_CR_MER;  // Chế độ xóa toàn bộ
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <FLASH_Erase_All+0x54>)
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <FLASH_Erase_All+0x54>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;  // Bắt đầu xóa
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <FLASH_Erase_All+0x54>)
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <FLASH_Erase_All+0x54>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001768:	6113      	str	r3, [r2, #16]

    if (FLASH_WaitForOperation(FLASH_TIMEOUT_INT) != FLASH_OK) return FLASH_TIMEOUT;
 800176a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800176e:	f7ff ff1d 	bl	80015ac <FLASH_WaitForOperation>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <FLASH_Erase_All+0x40>
 8001778:	2303      	movs	r3, #3
 800177a:	e006      	b.n	800178a <FLASH_Erase_All+0x4e>

    FLASH->CR &= ~FLASH_CR_MER;  // Tắt chế độ xóa toàn bộ
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <FLASH_Erase_All+0x54>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	4a03      	ldr	r2, [pc, #12]	@ (8001790 <FLASH_Erase_All+0x54>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6113      	str	r3, [r2, #16]
    return FLASH_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <HAL_Init+0x40>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HAL_Init+0x40>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	@ (80017d4 <HAL_Init+0x40>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f967 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f83e 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fe0e 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_DeInit+0x4c>)
 80017de:	4a12      	ldr	r2, [pc, #72]	@ (8001828 <HAL_DeInit+0x50>)
 80017e0:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_DeInit+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_DeInit+0x4c>)
 80017ea:	4a10      	ldr	r2, [pc, #64]	@ (800182c <HAL_DeInit+0x54>)
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80017ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_DeInit+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_DeInit+0x4c>)
 80017f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <HAL_DeInit+0x58>)
 80017f8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_DeInit+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <HAL_DeInit+0x4c>)
 8001802:	22c1      	movs	r2, #193	@ 0xc1
 8001804:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_DeInit+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <HAL_DeInit+0x4c>)
 800180e:	2201      	movs	r2, #1
 8001810:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001812:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <HAL_DeInit+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001818:	f000 f80c 	bl	8001834 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	f6fec9ff 	.word	0xf6fec9ff
 800182c:	04777933 	.word	0x04777933
 8001830:	226011ff 	.word	0x226011ff

08001834 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0x54>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_InitTick+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f93b 	bl	8001ade <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f911 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <HAL_InitTick+0x5c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000050 	.word	0x20000050
 800189c:	20000058 	.word	0x20000058
 80018a0:	20000054 	.word	0x20000054

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000058 	.word	0x20000058
 80018c8:	20000130 	.word	0x20000130

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000130 	.word	0x20000130

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000058 	.word	0x20000058

0800192c <__NVIC_SetPriorityGrouping>:
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_SetPriority>:
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	@ (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	@ (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	@ 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff47 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff5c 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb0 	bl	8001a4c <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e00e      	b.n	8001b26 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	795b      	ldrb	r3, [r3, #5]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fc8d 	bl	8001438 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	220f      	movs	r2, #15
 8001b3a:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001b3c:	f000 f82a 	bl	8001b94 <FLASH_OB_GetWRP>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001b48:	f000 f830 	bl	8001bac <FLASH_OB_GetRDP>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001b54:	f000 f80e 	bl	8001b74 <FLASH_OB_GetUser>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001b60:	f000 f844 	bl	8001bec <FLASH_OB_GetBOR>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	615a      	str	r2, [r3, #20]
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <FLASH_OB_GetUser+0x1c>)
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f023 031f 	bic.w	r3, r3, #31
 8001b82:	b2db      	uxtb	r3, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <FLASH_OB_GetWRP+0x14>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40023c16 	.word	0x40023c16

08001bac <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001bb2:	23aa      	movs	r3, #170	@ 0xaa
 8001bb4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <FLASH_OB_GetRDP+0x3c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2bcc      	cmp	r3, #204	@ 0xcc
 8001bbe:	d102      	bne.n	8001bc6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001bc0:	23cc      	movs	r3, #204	@ 0xcc
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	e009      	b.n	8001bda <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8001bc6:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <FLASH_OB_GetRDP+0x3c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2baa      	cmp	r3, #170	@ 0xaa
 8001bce:	d102      	bne.n	8001bd6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001bd0:	23aa      	movs	r3, #170	@ 0xaa
 8001bd2:	71fb      	strb	r3, [r7, #7]
 8001bd4:	e001      	b.n	8001bda <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8001bd6:	2355      	movs	r3, #85	@ 0x55
 8001bd8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40023c15 	.word	0x40023c15

08001bec <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <FLASH_OB_GetBOR+0x1c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	b2db      	uxtb	r3, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023c14 	.word	0x40023c14

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e16b      	b.n	8001f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 815a 	bne.w	8001efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d005      	beq.n	8001c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80b4 	beq.w	8001efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b60      	ldr	r3, [pc, #384]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a5b      	ldr	r2, [pc, #364]	@ (8001f1c <HAL_GPIO_Init+0x310>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	@ (8001f20 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f30 <HAL_GPIO_Init+0x324>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x328>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x32c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_GPIO_Init+0x330>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x20a>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00e      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e44:	4935      	ldr	r1, [pc, #212]	@ (8001f1c <HAL_GPIO_Init+0x310>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e76:	4a32      	ldr	r2, [pc, #200]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea0:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef4:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f ae90 	bls.w	8001c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40021400 	.word	0x40021400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40021c00 	.word	0x40021c00
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	400b      	ands	r3, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e267      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d075      	beq.n	80020b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fca:	4b88      	ldr	r3, [pc, #544]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	4b85      	ldr	r3, [pc, #532]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d112      	bne.n	8002008 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b82      	ldr	r3, [pc, #520]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fee:	d10b      	bne.n	8002008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d05b      	beq.n	80020b4 <HAL_RCC_OscConfig+0x108>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d157      	bne.n	80020b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e242      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002010:	d106      	bne.n	8002020 <HAL_RCC_OscConfig+0x74>
 8002012:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x98>
 800202a:	4b70      	ldr	r3, [pc, #448]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6f      	ldr	r2, [pc, #444]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b6d      	ldr	r3, [pc, #436]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6c      	ldr	r2, [pc, #432]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002044:	4b69      	ldr	r3, [pc, #420]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a68      	ldr	r2, [pc, #416]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a65      	ldr	r2, [pc, #404]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fc32 	bl	80018cc <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fc2e 	bl	80018cc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e207      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b5b      	ldr	r3, [pc, #364]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xc0>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fc1e 	bl	80018cc <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fc1a 	bl	80018cc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	@ 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e1f3      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b51      	ldr	r3, [pc, #324]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0xe8>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d063      	beq.n	800218a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020c2:	4b4a      	ldr	r3, [pc, #296]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ce:	4b47      	ldr	r3, [pc, #284]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d11c      	bne.n	8002114 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b44      	ldr	r3, [pc, #272]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	4b41      	ldr	r3, [pc, #260]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x152>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e1c7      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4937      	ldr	r1, [pc, #220]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	e03a      	b.n	800218a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211c:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <HAL_RCC_OscConfig+0x244>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff fbd3 	bl	80018cc <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff fbcf 	bl	80018cc <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1a8      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4925      	ldr	r1, [pc, #148]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215e:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <HAL_RCC_OscConfig+0x244>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff fbb2 	bl	80018cc <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216c:	f7ff fbae 	bl	80018cc <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e187      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d036      	beq.n	8002204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d016      	beq.n	80021cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <HAL_RCC_OscConfig+0x248>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7ff fb92 	bl	80018cc <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7ff fb8e 	bl	80018cc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e167      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_RCC_OscConfig+0x240>)
 80021c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x200>
 80021ca:	e01b      	b.n	8002204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_RCC_OscConfig+0x248>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7ff fb7b 	bl	80018cc <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	e00e      	b.n	80021f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff fb77 	bl	80018cc <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d907      	bls.n	80021f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e150      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
 80021ec:	40023800 	.word	0x40023800
 80021f0:	42470000 	.word	0x42470000
 80021f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	4b88      	ldr	r3, [pc, #544]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80021fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ea      	bne.n	80021da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8097 	beq.w	8002340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002216:	4b81      	ldr	r3, [pc, #516]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b7d      	ldr	r3, [pc, #500]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	4a7c      	ldr	r2, [pc, #496]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	4b7a      	ldr	r3, [pc, #488]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b77      	ldr	r3, [pc, #476]	@ (8002420 <HAL_RCC_OscConfig+0x474>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b74      	ldr	r3, [pc, #464]	@ (8002420 <HAL_RCC_OscConfig+0x474>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a73      	ldr	r2, [pc, #460]	@ (8002420 <HAL_RCC_OscConfig+0x474>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb37 	bl	80018cc <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7ff fb33 	bl	80018cc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e10c      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b6a      	ldr	r3, [pc, #424]	@ (8002420 <HAL_RCC_OscConfig+0x474>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x2ea>
 8002288:	4b64      	ldr	r3, [pc, #400]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	4a63      	ldr	r2, [pc, #396]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	@ 0x70
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x324>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x30c>
 800229e:	4b5f      	ldr	r3, [pc, #380]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a2:	4a5e      	ldr	r2, [pc, #376]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022aa:	4b5c      	ldr	r3, [pc, #368]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ae:	4a5b      	ldr	r2, [pc, #364]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0x324>
 80022b8:	4b58      	ldr	r3, [pc, #352]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022bc:	4a57      	ldr	r2, [pc, #348]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c4:	4b55      	ldr	r3, [pc, #340]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	4a54      	ldr	r2, [pc, #336]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 0304 	bic.w	r3, r3, #4
 80022ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7ff faf8 	bl	80018cc <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7ff faf4 	bl	80018cc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0cb      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	4b49      	ldr	r3, [pc, #292]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ee      	beq.n	80022e0 <HAL_RCC_OscConfig+0x334>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7ff fae2 	bl	80018cc <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230a:	e00a      	b.n	8002322 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7ff fade 	bl	80018cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0b5      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002322:	4b3e      	ldr	r3, [pc, #248]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ee      	bne.n	800230c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002334:	4b39      	ldr	r3, [pc, #228]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	4a38      	ldr	r2, [pc, #224]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800233e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a1 	beq.w	800248c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800234a:	4b34      	ldr	r3, [pc, #208]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d05c      	beq.n	8002410 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d141      	bne.n	80023e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <HAL_RCC_OscConfig+0x478>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff fab2 	bl	80018cc <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff faae 	bl	80018cc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e087      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	4b27      	ldr	r3, [pc, #156]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	3b01      	subs	r3, #1
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	491b      	ldr	r1, [pc, #108]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_RCC_OscConfig+0x478>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fa87 	bl	80018cc <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff fa83 	bl	80018cc <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e05c      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x416>
 80023e0:	e054      	b.n	800248c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_RCC_OscConfig+0x478>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fa70 	bl	80018cc <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff fa6c 	bl	80018cc <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e045      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_OscConfig+0x470>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x444>
 800240e:	e03d      	b.n	800248c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e038      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000
 8002424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x4ec>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d028      	beq.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d121      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d11a      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800245e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d111      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	3b01      	subs	r3, #1
 8002472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cc      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b68      	ldr	r3, [pc, #416]	@ (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d90c      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b65      	ldr	r3, [pc, #404]	@ (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	@ (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a58      	ldr	r2, [pc, #352]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d044      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d003      	beq.n	800255a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	2b03      	cmp	r3, #3
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b3f      	ldr	r3, [pc, #252]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e067      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4934      	ldr	r1, [pc, #208]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7ff f99e 	bl	80018cc <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7ff f99a 	bl	80018cc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e04f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d20c      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490a      	ldr	r1, [pc, #40]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f8fe 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	08003c3c 	.word	0x08003c3c
 8002660:	20000050 	.word	0x20000050
 8002664:	20000054 	.word	0x20000054

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800266c:	b090      	sub	sp, #64	@ 0x40
 800266e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002680:	4b59      	ldr	r3, [pc, #356]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d00d      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x40>
 800268c:	2b08      	cmp	r3, #8
 800268e:	f200 80a1 	bhi.w	80027d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x34>
 8002696:	2b04      	cmp	r3, #4
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800269a:	e09b      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b53      	ldr	r3, [pc, #332]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x184>)
 800269e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026a0:	e09b      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026a2:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026a6:	e098      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a8:	4b4f      	ldr	r3, [pc, #316]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b2:	4b4d      	ldr	r3, [pc, #308]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d028      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b4a      	ldr	r3, [pc, #296]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	2200      	movs	r2, #0
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026d0:	2100      	movs	r1, #0
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026d4:	fb03 f201 	mul.w	r2, r3, r1
 80026d8:	2300      	movs	r3, #0
 80026da:	fb00 f303 	mul.w	r3, r0, r3
 80026de:	4413      	add	r3, r2
 80026e0:	4a43      	ldr	r2, [pc, #268]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026e2:	fba0 1202 	umull	r1, r2, r0, r2
 80026e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026e8:	460a      	mov	r2, r1
 80026ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ee:	4413      	add	r3, r2
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f4:	2200      	movs	r2, #0
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	61fa      	str	r2, [r7, #28]
 80026fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002702:	f7fd fd61 	bl	80001c8 <__aeabi_uldivmod>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4613      	mov	r3, r2
 800270c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800270e:	e053      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002710:	4b35      	ldr	r3, [pc, #212]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	2200      	movs	r2, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	617a      	str	r2, [r7, #20]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002722:	f04f 0b00 	mov.w	fp, #0
 8002726:	4652      	mov	r2, sl
 8002728:	465b      	mov	r3, fp
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	0159      	lsls	r1, r3, #5
 8002734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002738:	0150      	lsls	r0, r2, #5
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	ebb2 080a 	subs.w	r8, r2, sl
 8002742:	eb63 090b 	sbc.w	r9, r3, fp
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800275a:	ebb2 0408 	subs.w	r4, r2, r8
 800275e:	eb63 0509 	sbc.w	r5, r3, r9
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	00eb      	lsls	r3, r5, #3
 800276c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002770:	00e2      	lsls	r2, r4, #3
 8002772:	4614      	mov	r4, r2
 8002774:	461d      	mov	r5, r3
 8002776:	eb14 030a 	adds.w	r3, r4, sl
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	eb45 030b 	adc.w	r3, r5, fp
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278e:	4629      	mov	r1, r5
 8002790:	028b      	lsls	r3, r1, #10
 8002792:	4621      	mov	r1, r4
 8002794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002798:	4621      	mov	r1, r4
 800279a:	028a      	lsls	r2, r1, #10
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a2:	2200      	movs	r2, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	60fa      	str	r2, [r7, #12]
 80027a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ac:	f7fd fd0c 	bl	80001c8 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4613      	mov	r3, r2
 80027b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80027c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x184>)
 80027d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3740      	adds	r7, #64	@ 0x40
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	017d7840 	.word	0x017d7840

080027f4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80027fa:	f7ff f867 	bl	80018cc <HAL_GetTick>
 80027fe:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002800:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5c      	ldr	r2, [pc, #368]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280e:	f7ff f85d 	bl	80018cc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0a7      	b.n	8002970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002820:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800282c:	4b52      	ldr	r3, [pc, #328]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002836:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002838:	f7ff f848 	bl	80018cc <HAL_GetTick>
 800283c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800283e:	4b4e      	ldr	r3, [pc, #312]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7ff f841 	bl	80018cc <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e089      	b.n	8002970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800285c:	4b46      	ldr	r3, [pc, #280]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002868:	f7ff f830 	bl	80018cc <HAL_GetTick>
 800286c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800286e:	4b42      	ldr	r3, [pc, #264]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a41      	ldr	r2, [pc, #260]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002874:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002878:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff f826 	bl	80018cc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e070      	b.n	8002970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800288e:	4b3a      	ldr	r3, [pc, #232]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800289a:	f7ff f817 	bl	80018cc <HAL_GetTick>
 800289e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028a0:	4b35      	ldr	r3, [pc, #212]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 80028a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ae:	f7ff f80d 	bl	80018cc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e057      	b.n	8002970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80028cc:	f7fe fffe 	bl	80018cc <HAL_GetTick>
 80028d0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80028d2:	4b29      	ldr	r3, [pc, #164]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 80028d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028dc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028e0:	f7fe fff4 	bl	80018cc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e03e      	b.n	8002970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80028f2:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002900:	4a1e      	ldr	r2, [pc, #120]	@ (800297c <HAL_RCC_DeInit+0x188>)
 8002902:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002904:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002906:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <HAL_RCC_DeInit+0x18c>)
 8002908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002912:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002916:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002918:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a16      	ldr	r2, [pc, #88]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800291e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002922:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800292a:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800292e:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002936:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800293a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800293c:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800293e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002940:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800294a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294c:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <HAL_RCC_DeInit+0x184>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002952:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_RCC_DeInit+0x190>)
 8002956:	4a0c      	ldr	r2, [pc, #48]	@ (8002988 <HAL_RCC_DeInit+0x194>)
 8002958:	601a      	str	r2, [r3, #0]
//  return HAL_OK;
  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <HAL_RCC_DeInit+0x198>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ff70 	bl	8001844 <HAL_InitTick>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800296e:	2300      	movs	r3, #0
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	04003010 	.word	0x04003010
 8002980:	20003000 	.word	0x20003000
 8002984:	20000050 	.word	0x20000050
 8002988:	00f42400 	.word	0x00f42400
 800298c:	20000054 	.word	0x20000054

08002990 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002990:	b480      	push	{r7}
 8002992:	b08b      	sub	sp, #44	@ 0x2c
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	613b      	str	r3, [r7, #16]
  return result;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e003      	b.n	80029c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2103      	movs	r1, #3
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	401a      	ands	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	61fb      	str	r3, [r7, #28]
  return result;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e003      	b.n	80029f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	372c      	adds	r7, #44	@ 0x2c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	401a      	ands	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	605a      	str	r2, [r3, #4]
}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b08b      	sub	sp, #44	@ 0x2c
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	613b      	str	r3, [r7, #16]
  return result;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e003      	b.n	8002a6c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2103      	movs	r1, #3
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	61fb      	str	r3, [r7, #28]
  return result;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002aa8:	bf00      	nop
 8002aaa:	372c      	adds	r7, #44	@ 0x2c
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b08b      	sub	sp, #44	@ 0x2c
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	613b      	str	r3, [r7, #16]
  return result;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e003      	b.n	8002ae6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2103      	movs	r1, #3
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	401a      	ands	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	61fb      	str	r3, [r7, #28]
  return result;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e003      	b.n	8002b14 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	60da      	str	r2, [r3, #12]
}
 8002b22:	bf00      	nop
 8002b24:	372c      	adds	r7, #44	@ 0x2c
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b08b      	sub	sp, #44	@ 0x2c
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	613b      	str	r3, [r7, #16]
  return result;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	210f      	movs	r1, #15
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	61fb      	str	r3, [r7, #28]
  return result;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e003      	b.n	8002b8e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002b9c:	bf00      	nop
 8002b9e:	372c      	adds	r7, #44	@ 0x2c
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b08b      	sub	sp, #44	@ 0x2c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	613b      	str	r3, [r7, #16]
  return result;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e003      	b.n	8002bdc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	210f      	movs	r1, #15
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	401a      	ands	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	61fb      	str	r3, [r7, #28]
  return result;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002c1a:	bf00      	nop
 8002c1c:	372c      	adds	r7, #44	@ 0x2c
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08a      	sub	sp, #40	@ 0x28
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	617b      	str	r3, [r7, #20]
  return result;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <LL_GPIO_Init+0x2e>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002c5e:	e057      	b.n	8002d10 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d049      	beq.n	8002d0a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d003      	beq.n	8002c86 <LL_GPIO_Init+0x60>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d10d      	bne.n	8002ca2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6a39      	ldr	r1, [r7, #32]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fed3 	bl	8002a3a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6a39      	ldr	r1, [r7, #32]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff feb4 	bl	8002a0a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6a39      	ldr	r1, [r7, #32]
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ff02 	bl	8002ab4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d121      	bne.n	8002cfc <LL_GPIO_Init+0xd6>
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	60bb      	str	r3, [r7, #8]
  return result;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <LL_GPIO_Init+0xac>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e003      	b.n	8002cda <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002cda:	2b07      	cmp	r3, #7
 8002cdc:	d807      	bhi.n	8002cee <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6a39      	ldr	r1, [r7, #32]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ff21 	bl	8002b2e <LL_GPIO_SetAFPin_0_7>
 8002cec:	e006      	b.n	8002cfc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff56 	bl	8002ba8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6a39      	ldr	r1, [r7, #32]
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff fe43 	bl	8002990 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1a0      	bne.n	8002c60 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3728      	adds	r7, #40	@ 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <LL_RCC_GetSysClkSource+0x18>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <LL_RCC_GetAHBPrescaler+0x18>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800

08002d60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d80:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <LL_RCC_PLL_GetMainSource+0x18>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002db8:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <LL_RCC_PLL_GetN+0x18>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <LL_RCC_PLL_GetP+0x18>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800

08002dec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <LL_RCC_PLL_GetDivider+0x18>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800

08002e08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002e10:	f000 f820 	bl	8002e54 <RCC_GetSystemClockFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f840 	bl	8002ea4 <RCC_GetHCLKClockFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f84e 	bl	8002ed0 <RCC_GetPCLK1ClockFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f85a 	bl	8002ef8 <RCC_GetPCLK2ClockFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60da      	str	r2, [r3, #12]
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002e5e:	f7ff ff63 	bl	8002d28 <LL_RCC_GetSysClkSource>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d00c      	beq.n	8002e82 <RCC_GetSystemClockFreq+0x2e>
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d80f      	bhi.n	8002e8c <RCC_GetSystemClockFreq+0x38>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <RCC_GetSystemClockFreq+0x22>
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d003      	beq.n	8002e7c <RCC_GetSystemClockFreq+0x28>
 8002e74:	e00a      	b.n	8002e8c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <RCC_GetSystemClockFreq+0x48>)
 8002e78:	607b      	str	r3, [r7, #4]
      break;
 8002e7a:	e00a      	b.n	8002e92 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <RCC_GetSystemClockFreq+0x4c>)
 8002e7e:	607b      	str	r3, [r7, #4]
      break;
 8002e80:	e007      	b.n	8002e92 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002e82:	2008      	movs	r0, #8
 8002e84:	f000 f84c 	bl	8002f20 <RCC_PLL_GetFreqDomain_SYS>
 8002e88:	6078      	str	r0, [r7, #4]
      break;
 8002e8a:	e002      	b.n	8002e92 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <RCC_GetSystemClockFreq+0x48>)
 8002e8e:	607b      	str	r3, [r7, #4]
      break;
 8002e90:	bf00      	nop
  }

  return frequency;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	017d7840 	.word	0x017d7840

08002ea4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002eac:	f7ff ff4a 	bl	8002d44 <LL_RCC_GetAHBPrescaler>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <RCC_GetHCLKClockFreq+0x28>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	40d3      	lsrs	r3, r2
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	08003c3c 	.word	0x08003c3c

08002ed0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ed8:	f7ff ff42 	bl	8002d60 <LL_RCC_GetAPB1Prescaler>
 8002edc:	4603      	mov	r3, r0
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	4a04      	ldr	r2, [pc, #16]	@ (8002ef4 <RCC_GetPCLK1ClockFreq+0x24>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	40d3      	lsrs	r3, r2
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08003c4c 	.word	0x08003c4c

08002ef8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f00:	f7ff ff3c 	bl	8002d7c <LL_RCC_GetAPB2Prescaler>
 8002f04:	4603      	mov	r3, r0
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	4a04      	ldr	r2, [pc, #16]	@ (8002f1c <RCC_GetPCLK2ClockFreq+0x24>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	40d3      	lsrs	r3, r2
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	08003c4c 	.word	0x08003c4c

08002f20 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002f34:	f7ff ff30 	bl	8002d98 <LL_RCC_PLL_GetMainSource>
 8002f38:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f46:	d003      	beq.n	8002f50 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002f48:	e005      	b.n	8002f56 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002f4a:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002f4c:	617b      	str	r3, [r7, #20]
      break;
 8002f4e:	e005      	b.n	8002f5c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002f52:	617b      	str	r3, [r7, #20]
      break;
 8002f54:	e002      	b.n	8002f5c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002f58:	617b      	str	r3, [r7, #20]
      break;
 8002f5a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d113      	bne.n	8002f8a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002f62:	f7ff ff43 	bl	8002dec <LL_RCC_PLL_GetDivider>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fbb3 f4f2 	udiv	r4, r3, r2
 8002f6e:	f7ff ff21 	bl	8002db4 <LL_RCC_PLL_GetN>
 8002f72:	4603      	mov	r3, r0
 8002f74:	fb03 f404 	mul.w	r4, r3, r4
 8002f78:	f7ff ff2a 	bl	8002dd0 <LL_RCC_PLL_GetP>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	3301      	adds	r3, #1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f88:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002f8a:	693b      	ldr	r3, [r7, #16]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd90      	pop	{r4, r7, pc}
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	017d7840 	.word	0x017d7840

08002f9c <LL_USART_IsEnabled>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_USART_SetStopBitsLength>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_USART_SetHWFlowCtrl>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	615a      	str	r2, [r3, #20]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_USART_SetBaudRate>:
{
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b0c0      	sub	sp, #256	@ 0x100
 8003016:	af00      	add	r7, sp, #0
 8003018:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800301c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003020:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003024:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003030:	f040 810c 	bne.w	800324c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003038:	2200      	movs	r2, #0
 800303a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800303e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003046:	4622      	mov	r2, r4
 8003048:	462b      	mov	r3, r5
 800304a:	1891      	adds	r1, r2, r2
 800304c:	6639      	str	r1, [r7, #96]	@ 0x60
 800304e:	415b      	adcs	r3, r3
 8003050:	667b      	str	r3, [r7, #100]	@ 0x64
 8003052:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003056:	4621      	mov	r1, r4
 8003058:	eb12 0801 	adds.w	r8, r2, r1
 800305c:	4629      	mov	r1, r5
 800305e:	eb43 0901 	adc.w	r9, r3, r1
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003076:	4690      	mov	r8, r2
 8003078:	4699      	mov	r9, r3
 800307a:	4623      	mov	r3, r4
 800307c:	eb18 0303 	adds.w	r3, r8, r3
 8003080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003084:	462b      	mov	r3, r5
 8003086:	eb49 0303 	adc.w	r3, r9, r3
 800308a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800308e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003092:	2200      	movs	r2, #0
 8003094:	469a      	mov	sl, r3
 8003096:	4693      	mov	fp, r2
 8003098:	eb1a 030a 	adds.w	r3, sl, sl
 800309c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800309e:	eb4b 030b 	adc.w	r3, fp, fp
 80030a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030ac:	f7fd f88c 	bl	80001c8 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4b64      	ldr	r3, [pc, #400]	@ (8003248 <LL_USART_SetBaudRate+0x238>)
 80030b6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	b29b      	uxth	r3, r3
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	b29c      	uxth	r4, r3
 80030c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030cc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030d0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	1891      	adds	r1, r2, r2
 80030da:	6539      	str	r1, [r7, #80]	@ 0x50
 80030dc:	415b      	adcs	r3, r3
 80030de:	657b      	str	r3, [r7, #84]	@ 0x54
 80030e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030e4:	4641      	mov	r1, r8
 80030e6:	1851      	adds	r1, r2, r1
 80030e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030ea:	4649      	mov	r1, r9
 80030ec:	414b      	adcs	r3, r1
 80030ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80030fc:	4659      	mov	r1, fp
 80030fe:	00cb      	lsls	r3, r1, #3
 8003100:	4651      	mov	r1, sl
 8003102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003106:	4651      	mov	r1, sl
 8003108:	00ca      	lsls	r2, r1, #3
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	4603      	mov	r3, r0
 8003110:	4642      	mov	r2, r8
 8003112:	189b      	adds	r3, r3, r2
 8003114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003118:	464b      	mov	r3, r9
 800311a:	460a      	mov	r2, r1
 800311c:	eb42 0303 	adc.w	r3, r2, r3
 8003120:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003124:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800312e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003132:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003136:	460b      	mov	r3, r1
 8003138:	18db      	adds	r3, r3, r3
 800313a:	643b      	str	r3, [r7, #64]	@ 0x40
 800313c:	4613      	mov	r3, r2
 800313e:	eb42 0303 	adc.w	r3, r2, r3
 8003142:	647b      	str	r3, [r7, #68]	@ 0x44
 8003144:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003148:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800314c:	f7fd f83c 	bl	80001c8 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4611      	mov	r1, r2
 8003156:	4b3c      	ldr	r3, [pc, #240]	@ (8003248 <LL_USART_SetBaudRate+0x238>)
 8003158:	fba3 2301 	umull	r2, r3, r3, r1
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2264      	movs	r2, #100	@ 0x64
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	1acb      	subs	r3, r1, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800316c:	4b36      	ldr	r3, [pc, #216]	@ (8003248 <LL_USART_SetBaudRate+0x238>)
 800316e:	fba3 2302 	umull	r2, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	b29b      	uxth	r3, r3
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800317e:	b29b      	uxth	r3, r3
 8003180:	4423      	add	r3, r4
 8003182:	b29c      	uxth	r4, r3
 8003184:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003188:	2200      	movs	r2, #0
 800318a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800318e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003192:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003196:	4642      	mov	r2, r8
 8003198:	464b      	mov	r3, r9
 800319a:	1891      	adds	r1, r2, r2
 800319c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800319e:	415b      	adcs	r3, r3
 80031a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031a6:	4641      	mov	r1, r8
 80031a8:	1851      	adds	r1, r2, r1
 80031aa:	6339      	str	r1, [r7, #48]	@ 0x30
 80031ac:	4649      	mov	r1, r9
 80031ae:	414b      	adcs	r3, r1
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031be:	4659      	mov	r1, fp
 80031c0:	00cb      	lsls	r3, r1, #3
 80031c2:	4651      	mov	r1, sl
 80031c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c8:	4651      	mov	r1, sl
 80031ca:	00ca      	lsls	r2, r1, #3
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	4603      	mov	r3, r0
 80031d2:	4642      	mov	r2, r8
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031da:	464b      	mov	r3, r9
 80031dc:	460a      	mov	r2, r1
 80031de:	eb42 0303 	adc.w	r3, r2, r3
 80031e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031f0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80031f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80031f8:	460b      	mov	r3, r1
 80031fa:	18db      	adds	r3, r3, r3
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fe:	4613      	mov	r3, r2
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800320a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800320e:	f7fc ffdb 	bl	80001c8 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <LL_USART_SetBaudRate+0x238>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	@ 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	@ 0x32
 800322a:	4a07      	ldr	r2, [pc, #28]	@ (8003248 <LL_USART_SetBaudRate+0x238>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	b29b      	uxth	r3, r3
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	b29b      	uxth	r3, r3
 800323a:	4423      	add	r3, r4
 800323c:	b29b      	uxth	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003244:	609a      	str	r2, [r3, #8]
}
 8003246:	e108      	b.n	800345a <LL_USART_SetBaudRate+0x44a>
 8003248:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800324c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003250:	2200      	movs	r2, #0
 8003252:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003256:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800325a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800325e:	4642      	mov	r2, r8
 8003260:	464b      	mov	r3, r9
 8003262:	1891      	adds	r1, r2, r2
 8003264:	6239      	str	r1, [r7, #32]
 8003266:	415b      	adcs	r3, r3
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
 800326a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800326e:	4641      	mov	r1, r8
 8003270:	1854      	adds	r4, r2, r1
 8003272:	4649      	mov	r1, r9
 8003274:	eb43 0501 	adc.w	r5, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	00eb      	lsls	r3, r5, #3
 8003282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003286:	00e2      	lsls	r2, r4, #3
 8003288:	4614      	mov	r4, r2
 800328a:	461d      	mov	r5, r3
 800328c:	4643      	mov	r3, r8
 800328e:	18e3      	adds	r3, r4, r3
 8003290:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003294:	464b      	mov	r3, r9
 8003296:	eb45 0303 	adc.w	r3, r5, r3
 800329a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800329e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80032b8:	4629      	mov	r1, r5
 80032ba:	008b      	lsls	r3, r1, #2
 80032bc:	4621      	mov	r1, r4
 80032be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c2:	4621      	mov	r1, r4
 80032c4:	008a      	lsls	r2, r1, #2
 80032c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032ca:	f7fc ff7d 	bl	80001c8 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4b65      	ldr	r3, [pc, #404]	@ (8003468 <LL_USART_SetBaudRate+0x458>)
 80032d4:	fba3 2302 	umull	r2, r3, r3, r2
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	b29b      	uxth	r3, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	b29c      	uxth	r4, r3
 80032e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80032f2:	4642      	mov	r2, r8
 80032f4:	464b      	mov	r3, r9
 80032f6:	1891      	adds	r1, r2, r2
 80032f8:	61b9      	str	r1, [r7, #24]
 80032fa:	415b      	adcs	r3, r3
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003302:	4641      	mov	r1, r8
 8003304:	1851      	adds	r1, r2, r1
 8003306:	6139      	str	r1, [r7, #16]
 8003308:	4649      	mov	r1, r9
 800330a:	414b      	adcs	r3, r1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331a:	4659      	mov	r1, fp
 800331c:	00cb      	lsls	r3, r1, #3
 800331e:	4651      	mov	r1, sl
 8003320:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003324:	4651      	mov	r1, sl
 8003326:	00ca      	lsls	r2, r1, #3
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	4603      	mov	r3, r0
 800332e:	4642      	mov	r2, r8
 8003330:	189b      	adds	r3, r3, r2
 8003332:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003336:	464b      	mov	r3, r9
 8003338:	460a      	mov	r2, r1
 800333a:	eb42 0303 	adc.w	r3, r2, r3
 800333e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003342:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800334c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800335c:	4649      	mov	r1, r9
 800335e:	008b      	lsls	r3, r1, #2
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003366:	4641      	mov	r1, r8
 8003368:	008a      	lsls	r2, r1, #2
 800336a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800336e:	f7fc ff2b 	bl	80001c8 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4611      	mov	r1, r2
 8003378:	4b3b      	ldr	r3, [pc, #236]	@ (8003468 <LL_USART_SetBaudRate+0x458>)
 800337a:	fba3 2301 	umull	r2, r3, r3, r1
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2264      	movs	r2, #100	@ 0x64
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	1acb      	subs	r3, r1, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	@ 0x32
 800338c:	4a36      	ldr	r2, [pc, #216]	@ (8003468 <LL_USART_SetBaudRate+0x458>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	b29b      	uxth	r3, r3
 8003396:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800339a:	b29b      	uxth	r3, r3
 800339c:	4423      	add	r3, r4
 800339e:	b29c      	uxth	r4, r3
 80033a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033a4:	2200      	movs	r2, #0
 80033a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033a8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033aa:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033ae:	4642      	mov	r2, r8
 80033b0:	464b      	mov	r3, r9
 80033b2:	1891      	adds	r1, r2, r2
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	415b      	adcs	r3, r3
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033be:	4641      	mov	r1, r8
 80033c0:	1851      	adds	r1, r2, r1
 80033c2:	6039      	str	r1, [r7, #0]
 80033c4:	4649      	mov	r1, r9
 80033c6:	414b      	adcs	r3, r1
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d6:	4659      	mov	r1, fp
 80033d8:	00cb      	lsls	r3, r1, #3
 80033da:	4651      	mov	r1, sl
 80033dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e0:	4651      	mov	r1, sl
 80033e2:	00ca      	lsls	r2, r1, #3
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	4642      	mov	r2, r8
 80033ec:	189b      	adds	r3, r3, r2
 80033ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80033f0:	464b      	mov	r3, r9
 80033f2:	460a      	mov	r2, r1
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80033fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80033fe:	2200      	movs	r2, #0
 8003400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003402:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003410:	4649      	mov	r1, r9
 8003412:	008b      	lsls	r3, r1, #2
 8003414:	4641      	mov	r1, r8
 8003416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341a:	4641      	mov	r1, r8
 800341c:	008a      	lsls	r2, r1, #2
 800341e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003422:	f7fc fed1 	bl	80001c8 <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <LL_USART_SetBaudRate+0x458>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	@ 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	3332      	adds	r3, #50	@ 0x32
 800343e:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <LL_USART_SetBaudRate+0x458>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	b29b      	uxth	r3, r3
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	b29b      	uxth	r3, r3
 800344e:	4423      	add	r3, r4
 8003450:	b29b      	uxth	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003458:	609a      	str	r2, [r3, #8]
}
 800345a:	bf00      	nop
 800345c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003460:	46bd      	mov	sp, r7
 8003462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003466:	bf00      	nop
 8003468:	51eb851f 	.word	0x51eb851f

0800346c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fd8c 	bl	8002f9c <LL_USART_IsEnabled>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d15e      	bne.n	8003548 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003492:	f023 030c 	bic.w	r3, r3, #12
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	6851      	ldr	r1, [r2, #4]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	4311      	orrs	r1, r2
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	6912      	ldr	r2, [r2, #16]
 80034a4:	4311      	orrs	r1, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6992      	ldr	r2, [r2, #24]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fd83 	bl	8002fc4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff fd90 	bl	8002fea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fc9a 	bl	8002e08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003554 <LL_USART_Init+0xe8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d102      	bne.n	80034e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e021      	b.n	8003526 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003558 <LL_USART_Init+0xec>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d102      	bne.n	80034f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e01a      	b.n	8003526 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	@ (800355c <LL_USART_Init+0xf0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d102      	bne.n	80034fe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	e013      	b.n	8003526 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <LL_USART_Init+0xf4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d102      	bne.n	800350c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e00c      	b.n	8003526 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a15      	ldr	r2, [pc, #84]	@ (8003564 <LL_USART_Init+0xf8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d102      	bne.n	800351a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e005      	b.n	8003526 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a12      	ldr	r2, [pc, #72]	@ (8003568 <LL_USART_Init+0xfc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003540:	69b9      	ldr	r1, [r7, #24]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fd64 	bl	8003010 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003548:	7ffb      	ldrb	r3, [r7, #31]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40011000 	.word	0x40011000
 8003558:	40004400 	.word	0x40004400
 800355c:	40004800 	.word	0x40004800
 8003560:	40011400 	.word	0x40011400
 8003564:	40004c00 	.word	0x40004c00
 8003568:	40005000 	.word	0x40005000

0800356c <rbuffer_init>:
 */

// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003574:	b672      	cpsid	i
}
 8003576:	bf00      	nop
	__disable_irq();
	rb->in = 0;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->out = 0;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count = 0;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8003590:	b662      	cpsie	i
}
 8003592:	bf00      	nop
	__enable_irq();
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <rbuffer_full>:

uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	return (rb->count == (uint16_t) RingBufferSize);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	return (rb->count == 0);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	6039      	str	r1, [r7, #0]
 80035f8:	71fb      	strb	r3, [r7, #7]
	*(rb->buffer + rb->in) = data;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 8003602:	b292      	uxth	r2, r2
 8003604:	4413      	add	r3, r2
 8003606:	79fa      	ldrb	r2, [r7, #7]
 8003608:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800360a:	b672      	cpsid	i
}
 800360c:	bf00      	nop
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003614:	b29b      	uxth	r3, r3
 8003616:	3301      	adds	r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	b29a      	uxth	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->count++;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800362a:	b29b      	uxth	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8003636:	b662      	cpsie	i
}
 8003638:	bf00      	nop
	__enable_irq();
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
	char data = *(rb->buffer + rb->out);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003656:	b292      	uxth	r2, r2
 8003658:	4413      	add	r3, r2
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800365e:	b672      	cpsid	i
}
 8003660:	bf00      	nop
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003668:	b29b      	uxth	r3, r3
 800366a:	3301      	adds	r3, #1
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 800368a:	b662      	cpsie	i
}
 800368c:	bf00      	nop
	__enable_irq();
	return data;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b80      	cmp	r3, #128	@ 0x80
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f06f 0220 	mvn.w	r2, #32
 80036f6:	601a      	str	r2, [r3, #0]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	@ 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	330c      	adds	r3, #12
 8003710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	60bb      	str	r3, [r7, #8]
   return(result);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f043 0320 	orr.w	r3, r3, #32
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	330c      	adds	r3, #12
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	61ba      	str	r2, [r7, #24]
 800372a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6979      	ldr	r1, [r7, #20]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	613b      	str	r3, [r7, #16]
   return(result);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e7      	bne.n	800370c <LL_USART_EnableIT_RXNE+0x8>
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3724      	adds	r7, #36	@ 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800374a:	b480      	push	{r7}
 800374c:	b089      	sub	sp, #36	@ 0x24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	330c      	adds	r3, #12
 8003756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	330c      	adds	r3, #12
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	61ba      	str	r2, [r7, #24]
 8003770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	613b      	str	r3, [r7, #16]
   return(result);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e7      	bne.n	8003752 <LL_USART_EnableIT_TXE+0x8>
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	3724      	adds	r7, #36	@ 0x24
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	@ 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	330c      	adds	r3, #12
 800379c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	330c      	adds	r3, #12
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	61ba      	str	r2, [r7, #24]
 80037b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6979      	ldr	r1, [r7, #20]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	613b      	str	r3, [r7, #16]
   return(result);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e7      	bne.n	8003798 <LL_USART_DisableIT_TXE+0x8>
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3724      	adds	r7, #36	@ 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b2db      	uxtb	r3, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_USART_TransmitData9>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0x1FF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData9(USART_TypeDef *USARTx, uint16_t Value)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  USARTx->DR = Value & 0x1FFU;
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	605a      	str	r2, [r3, #4]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <USART1_IRQ>:
usart_meta_t *p_UART1_meta = &UART1_meta;

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void USART1_IRQ(void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
	uint8_t data;
	if (LL_USART_IsActiveFlag_TXE(USART1)) {
 800381a:	4825      	ldr	r0, [pc, #148]	@ (80038b0 <USART1_IRQ+0x9c>)
 800381c:	f7ff ff51 	bl	80036c2 <LL_USART_IsActiveFlag_TXE>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01f      	beq.n	8003866 <USART1_IRQ+0x52>
		if (!rbuffer_empty(&p_UART1_meta->rb_tx)) {
 8003826:	4b23      	ldr	r3, [pc, #140]	@ (80038b4 <USART1_IRQ+0xa0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff feca 	bl	80035c8 <rbuffer_empty>
 8003834:	4603      	mov	r3, r0
 8003836:	f083 0301 	eor.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <USART1_IRQ+0x4c>
			data = rbuffer_remove(&p_UART1_meta->rb_tx);
 8003840:	4b1c      	ldr	r3, [pc, #112]	@ (80038b4 <USART1_IRQ+0xa0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fefc 	bl	8003646 <rbuffer_remove>
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
			LL_USART_TransmitData9(USART1, (uint16_t) data);
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	b29b      	uxth	r3, r3
 8003856:	4619      	mov	r1, r3
 8003858:	4815      	ldr	r0, [pc, #84]	@ (80038b0 <USART1_IRQ+0x9c>)
 800385a:	f7ff ffc9 	bl	80037f0 <LL_USART_TransmitData9>
 800385e:	e002      	b.n	8003866 <USART1_IRQ+0x52>
		} else
			LL_USART_DisableIT_TXE(USART1);
 8003860:	4813      	ldr	r0, [pc, #76]	@ (80038b0 <USART1_IRQ+0x9c>)
 8003862:	f7ff ff95 	bl	8003790 <LL_USART_DisableIT_TXE>
	}
	if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8003866:	4812      	ldr	r0, [pc, #72]	@ (80038b0 <USART1_IRQ+0x9c>)
 8003868:	f7ff ff18 	bl	800369c <LL_USART_IsActiveFlag_RXNE>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01a      	beq.n	80038a8 <USART1_IRQ+0x94>
		data = LL_USART_ReceiveData8(USART1);
 8003872:	480f      	ldr	r0, [pc, #60]	@ (80038b0 <USART1_IRQ+0x9c>)
 8003874:	f7ff ffaf 	bl	80037d6 <LL_USART_ReceiveData8>
 8003878:	4603      	mov	r3, r0
 800387a:	71fb      	strb	r3, [r7, #7]
		if (!rbuffer_full(&p_UART1_meta->rb_rx)) {
 800387c:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <USART1_IRQ+0xa0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fe8d 	bl	80035a0 <rbuffer_full>
 8003886:	4603      	mov	r3, r0
 8003888:	f083 0301 	eor.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <USART1_IRQ+0x8e>
			rbuffer_insert(data, &p_UART1_meta->rb_rx);
 8003892:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <USART1_IRQ+0xa0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fea6 	bl	80035ee <rbuffer_insert>
		}
		LL_USART_ClearFlag_RXNE(USART1);
 80038a2:	4803      	ldr	r0, [pc, #12]	@ (80038b0 <USART1_IRQ+0x9c>)
 80038a4:	f7ff ff20 	bl	80036e8 <LL_USART_ClearFlag_RXNE>
	}
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40011000 	.word	0x40011000
 80038b4:	2000005c 	.word	0x2000005c

080038b8 <USART1_init>:
void USART1_init(void) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	rbuffer_init(&p_UART1_meta->rb_tx);                        // Init Rx buffer
 80038bc:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <USART1_init+0x28>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fe51 	bl	800356c <rbuffer_init>
	rbuffer_init(&p_UART1_meta->rb_rx);                        // Init Tx buffer
 80038ca:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <USART1_init+0x28>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fe4c 	bl	800356c <rbuffer_init>
	LL_USART_EnableIT_RXNE(USART1);
 80038d4:	4803      	ldr	r0, [pc, #12]	@ (80038e4 <USART1_init+0x2c>)
 80038d6:	f7ff ff15 	bl	8003704 <LL_USART_EnableIT_RXNE>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000005c 	.word	0x2000005c
 80038e4:	40011000 	.word	0x40011000

080038e8 <USART1_send_char>:

void USART1_send_char(char c) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
	while (rbuffer_full(&p_UART1_meta->rb_tx))
 80038f2:	bf00      	nop
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <USART1_send_char+0x40>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fe4f 	bl	80035a0 <rbuffer_full>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f5      	bne.n	80038f4 <USART1_send_char+0xc>
		;
	rbuffer_insert(c, &p_UART1_meta->rb_tx);
 8003908:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <USART1_send_char+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f503 7283 	add.w	r2, r3, #262	@ 0x106
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fe6a 	bl	80035ee <rbuffer_insert>
	LL_USART_EnableIT_TXE(USART1);
 800391a:	4804      	ldr	r0, [pc, #16]	@ (800392c <USART1_send_char+0x44>)
 800391c:	f7ff ff15 	bl	800374a <LL_USART_EnableIT_TXE>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	2000005c 	.word	0x2000005c
 800392c:	40011000 	.word	0x40011000

08003930 <USART1_send_string>:

void USART1_send_string(const char *str) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	while (*str) {
 8003938:	e006      	b.n	8003948 <USART1_send_string+0x18>
		USART1_send_char(*str++);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ffd0 	bl	80038e8 <USART1_send_char>
	while (*str) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f4      	bne.n	800393a <USART1_send_string+0xa>
	}
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <USART1_send_array>:

void USART1_send_array(const char *str, uint8_t len) {
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	70fb      	strb	r3, [r7, #3]
	uint8_t udx;
	for (udx = 0; udx < len; udx++)
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e009      	b.n	8003980 <USART1_send_array+0x26>
		USART1_send_char(*str++);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ffb7 	bl	80038e8 <USART1_send_char>
	for (udx = 0; udx < len; udx++)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	3301      	adds	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	429a      	cmp	r2, r3
 8003986:	d3f1      	bcc.n	800396c <USART1_send_array+0x12>
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <SchedulerSysTickIntHandler>:
//! \return None.
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
    g_ui32SchedulerTickCount++;
 8003998:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <SchedulerSysTickIntHandler+0x18>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	4a03      	ldr	r2, [pc, #12]	@ (80039ac <SchedulerSysTickIntHandler+0x18>)
 80039a0:	6013      	str	r3, [r2, #0]
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20000344 	.word	0x20000344

080039b0 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	e022      	b.n	8003a02 <SchedulerRun+0x52>
    {
        //
        // Get a pointer to the task information.
        //
        pi16Task = &g_psSchedulerTable[ui32Loop];
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <SchedulerRun+0x68>)
 80039c8:	4413      	add	r3, r2
 80039ca:	603b      	str	r3, [r7, #0]

        //
        // Is this task active and, if so, is it time to call it's function?
        //
        if(pi16Task->bActive &&
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7c1b      	ldrb	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <SchedulerRun+0x4c>
           (SchedulerElapsedTicksGet(pi16Task->ui32LastCall) >=
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f823 	bl	8003a24 <SchedulerElapsedTicksGet>
 80039de:	4602      	mov	r2, r0
            pi16Task->ui32FrequencyTicks))
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
        if(pi16Task->bActive &&
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d309      	bcc.n	80039fc <SchedulerRun+0x4c>
        {
            //
            // Remember the timestamp at which we make the function call.
            //
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 80039e8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <SchedulerRun+0x6c>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	60da      	str	r2, [r3, #12]

            //
            // Call the task function, passing the provided parameter.
            //
            pi16Task->pfnFunction(pi16Task->pvParam);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	6852      	ldr	r2, [r2, #4]
 80039f8:	4610      	mov	r0, r2
 80039fa:	4798      	blx	r3
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	4b07      	ldr	r3, [pc, #28]	@ (8003a20 <SchedulerRun+0x70>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3d7      	bcc.n	80039bc <SchedulerRun+0xc>
        }
    }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000028 	.word	0x20000028
 8003a1c:	20000344 	.word	0x20000344
 8003a20:	20000024 	.word	0x20000024

08003a24 <SchedulerElapsedTicksGet>:
//! \return The number of ticks elapsed since the provided tick count.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksGet(uint32_t ui32TickCount)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <SchedulerElapsedTicksGet+0x20>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f808 	bl	8003a48 <SchedulerElapsedTicksCalc>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000344 	.word	0x20000344

08003a48 <SchedulerElapsedTicksCalc>:
//! counts.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1ad3      	subs	r3, r2, r3
           ((0xFFFFFFFF - ui32TickStart) + ui32TickEnd + 1));
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <memset>:
 8003a64:	4402      	add	r2, r0
 8003a66:	4603      	mov	r3, r0
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4d0d      	ldr	r5, [pc, #52]	@ (8003aac <__libc_init_array+0x38>)
 8003a78:	4c0d      	ldr	r4, [pc, #52]	@ (8003ab0 <__libc_init_array+0x3c>)
 8003a7a:	1b64      	subs	r4, r4, r5
 8003a7c:	10a4      	asrs	r4, r4, #2
 8003a7e:	2600      	movs	r6, #0
 8003a80:	42a6      	cmp	r6, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	4d0b      	ldr	r5, [pc, #44]	@ (8003ab4 <__libc_init_array+0x40>)
 8003a86:	4c0c      	ldr	r4, [pc, #48]	@ (8003ab8 <__libc_init_array+0x44>)
 8003a88:	f000 f818 	bl	8003abc <_init>
 8003a8c:	1b64      	subs	r4, r4, r5
 8003a8e:	10a4      	asrs	r4, r4, #2
 8003a90:	2600      	movs	r6, #0
 8003a92:	42a6      	cmp	r6, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9c:	4798      	blx	r3
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa6:	4798      	blx	r3
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	08003c5c 	.word	0x08003c5c
 8003ab0:	08003c5c 	.word	0x08003c5c
 8003ab4:	08003c5c 	.word	0x08003c5c
 8003ab8:	08003c60 	.word	0x08003c60

08003abc <_init>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr

08003ac8 <_fini>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr
